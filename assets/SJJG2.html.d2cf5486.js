import{e as n}from"./app.f5f78651.js";import{_ as s}from"./plugin-vue_export-helper.21dcd24c.js";var a="/by-jj/SJJG/image-20220329225654437.png",p="/by-jj/SJJG/image-20220329225708452.png",t="/by-jj/SJJG/image-20220329225725203.png",o="/by-jj/SJJG/image-20220329225737110.png",e="/by-jj/SJJG/image-20220329225747886.png",c="/by-jj/SJJG/image-20220329225755491.png",l="/by-jj/SJJG/image-20220329225805269.png",u="/by-jj/SJJG/image-20220329225823460.png",r="/by-jj/SJJG/image-20220329225839731.png",i="/by-jj/SJJG/image-20220329225850881.png",k="/by-jj/SJJG/wps7482.tmp.jpg",b="/by-jj/SJJG/image-20220329230524471.png",m="/by-jj/SJJG/image-20220329230553586.png",d="/by-jj/SJJG/image-20220329230606074.png",h="/by-jj/SJJG/image-20220329230616120.png",g="/by-jj/SJJG/image-20220329230635252.png",y="/by-jj/SJJG/image-20220329230713884.png",w="/by-jj/SJJG/image-20220329230757035.png",f="/by-jj/SJJG/image-20220329230807920.png",L="/by-jj/SJJG/image-20220329230821184.png",v="/by-jj/SJJG/image-20220329230831106.png",_="/by-jj/SJJG/image-20220329230838271.png",N="/by-jj/SJJG/image-20220329230848072.png",T="/by-jj/SJJG/image-20220329230907487.png",q="/by-jj/SJJG/image-20220329230917580.png",S="/by-jj/SJJG/image-20220329230940547.png",U="/by-jj/SJJG/image-20220329230953221.png",C="/by-jj/SJJG/image-20220329231019365.png",E="/by-jj/SJJG/image-20220329231037829.png",P="/by-jj/SJJG/image-20220329231050572.png",j="/by-jj/SJJG/image-20220329231122831.png";const x={},R=n('<h1 id="_7-\u6811\u548C\u4E8C\u53C9\u6811" tabindex="-1"><a class="header-anchor" href="#_7-\u6811\u548C\u4E8C\u53C9\u6811" aria-hidden="true">#</a> 7.\u6811\u548C\u4E8C\u53C9\u6811</h1><h2 id="_7-1-\u6811\u7684\u57FA\u672C\u6982\u5FF5" tabindex="-1"><a class="header-anchor" href="#_7-1-\u6811\u7684\u57FA\u672C\u6982\u5FF5" aria-hidden="true">#</a> 7.1 \u6811\u7684\u57FA\u672C\u6982\u5FF5</h2><p><img src="'+a+'" alt="image-20220329225654437"></p><p>\u6811\u7684\u5B9A\u4E49\uFF1A</p><p>\u7531\u4E00\u4E2A\u6216\u591A\u4E2A(n\u22650)\u7ED3\u70B9\u7EC4\u6210\u7684\u6709\u9650\u96C6\u5408 T\uFF0C\u6709\u4E14\u4EC5\u6709\u4E00\u4E2A\u7ED3\u70B9\u79F0\u4E3A\u6839\uFF08root\uFF09\uFF0C\u5F53 n&gt;1</p><p>\u65F6\uFF0C\u5176\u4F59\u7684\u7ED3\u70B9\u5206\u4E3A <strong>m(m\u22650)\u4E2A\u4E92\u4E0D\u76F8\u4EA4\u7684\u6709\u9650\u96C6\u5408</strong> T1,T2\uFF0C\u2026\uFF0CTm\u3002\u6BCF\u4E2A\u96C6\u5408\u672C\u8EAB</p><p>\u53C8\u662F\u68F5\u6811\uFF0C\u88AB\u79F0\u4F5C\u8FD9\u4E2A\u6839\u7684\u5B50\u6811 \u3002</p><ul><li><p>\u6811\u7684\u7ED3\u6784\u7279\u70B9</p></li><li><p>\u975E\u7EBF\u6027\u7ED3\u6784\uFF0C\u6709\u4E00\u4E2A\u76F4\u63A5\u524D\u9A71\uFF0C\u4F46\u53EF\u80FD\u6709\u591A\u4E2A\u76F4\u63A5\u540E\u7EE7\uFF081:n\uFF09</p></li><li><p>\u6811\u7684\u5B9A\u4E49\u5177\u6709\u9012\u5F52\u6027\uFF0C\u6811\u4E2D\u8FD8\u6709\u6811\u3002</p></li><li><p>\u6811\u53EF\u4EE5\u4E3A\u7A7A\uFF0C\u5373\u8282\u70B9\u4E2A\u6570\u4E3A 0\u3002</p></li><li><p>\u82E5\u5E72\u672F\u8BED</p></li><li><p>\u6839 -&gt; \u5373\u6839\u7ED3\u70B9(\u6CA1\u6709\u524D\u9A71)</p></li><li><p>\u53F6\u5B50 -&gt; \u5373\u7EC8\u7AEF\u7ED3\u70B9(\u6CA1\u6709\u540E\u7EE7)</p></li><li><p>\u68EE\u6797 -&gt; \u6307 m \u68F5\u4E0D\u76F8\u4EA4\u7684\u6811\u7684\u96C6\u5408(\u4F8B\u5982\u5220\u9664 A \u540E\u7684\u5B50\u6811\u4E2A\u6570)\uF06E \u6709\u5E8F\u6811 \uF0E0 \u7ED3\u70B9\u5404\u5B50\u6811\u4ECE\u5DE6\u81F3\u53F3\u6709\u5E8F\uFF0C\u4E0D\u80FD\u4E92\u6362\uFF08\u5DE6\u4E3A\u7B2C\u4E00\uFF09</p></li><li><p>\u65E0\u5E8F\u6811 -&gt; \u7ED3\u70B9\u5404\u5B50\u6811\u53EF\u4E92\u6362\u4F4D\u7F6E\u3002</p></li><li><p>\u53CC\u4EB2 -&gt; \u5373\u4E0A\u5C42\u7684\u90A3\u4E2A\u7ED3\u70B9(\u76F4\u63A5\u524D\u9A71) parent</p></li><li><p>\u5B69\u5B50 -&gt; \u5373\u4E0B\u5C42\u7ED3\u70B9\u7684\u5B50\u6811 (\u76F4\u63A5\u540E\u7EE7) child</p></li><li><p>\u5144\u5F1F -&gt; \u540C\u4E00\u53CC\u4EB2\u4E0B\u7684\u540C\u5C42\u7ED3\u70B9\uFF08\u5B69\u5B50\u4E4B\u95F4\u4E92\u79F0\u5144\u5F1F\uFF09sibling</p></li><li><p>\u5802\u5144\u5F1F -&gt; \u5373\u53CC\u4EB2\u4F4D\u4E8E\u540C\u4E00\u5C42\u7684\u7ED3\u70B9\uFF08\u4F46\u5E76\u975E\u540C\u4E00\u53CC\u4EB2\uFF09cousin</p></li><li><p>\u7956\u5148 -&gt; \u5373\u4ECE\u6839\u5230\u8BE5\u7ED3\u70B9\u6240\u7ECF\u5206\u652F\u7684\u6240\u6709\u7ED3\u70B9</p></li><li><p>\u5B50\u5B59 -&gt; \u5373\u8BE5\u7ED3\u70B9\u4E0B\u5C42\u5B50\u6811\u4E2D\u7684\u4EFB\u4E00\u7ED3\u70B9</p></li></ul><p><img src="'+p+'" alt="image-20220329225708452"></p><p>\u7ED3\u70B9 -&gt; \u5373\u6811\u7684\u6570\u636E\u5143\u7D20</p><ul><li><p>\u7ED3\u70B9\u7684\u5EA6 -&gt; \u7ED3\u70B9\u6302\u63A5\u7684\u5B50\u6811\u6570\uFF08\u6709\u51E0\u4E2A\u76F4\u63A5\u540E\u7EE7\u5C31\u662F\u51E0\u5EA6\uFF09</p></li><li><p>\u7ED3\u70B9\u7684\u5C42\u6B21 -&gt; \u4ECE\u6839\u5230\u8BE5\u7ED3\u70B9\u7684\u5C42\u6570\uFF08\u6839\u7ED3\u70B9\u7B97\u7B2C\u4E00\u5C42\uFF09</p></li><li><p>\u7EC8\u7AEF\u7ED3\u70B9 -&gt; \u5373\u5EA6\u4E3A 0 \u7684\u7ED3\u70B9\uFF0C\u5373\u53F6\u5B50</p></li><li><p>\u5206\u652F\u7ED3\u70B9 -&gt; \u9664\u6811\u6839\u4EE5\u5916\u7684\u7ED3\u70B9\uFF08\u4E5F\u79F0\u4E3A\u5185\u90E8\u7ED3\u70B9\uFF09</p></li><li><p>\u6811\u7684\u5EA6 -&gt; \u6240\u6709\u7ED3\u70B9\u5EA6\u4E2D\u7684\u6700\u5927\u503C\uFF08Max{\u5404\u7ED3\u70B9\u7684\u5EA6}\uFF09</p></li><li><p>\u6811\u7684\u6DF1\u5EA6(\u6216\u9AD8\u5EA6) -&gt; \u6307\u6240\u6709\u7ED3\u70B9\u4E2D\u6700\u5927\u7684\u5C42\u6570\uFF08Max{\u5404\u7ED3\u70B9\u7684\u5C42\u6B21}\uFF09</p></li></ul><p>\u4E0A\u56FE\u4E2D\u7684\u7ED3\u70B9\u6570\uFF1D 13\uFF0C\u6811\u7684\u5EA6\uFF1D 3\uFF0C\u6811\u7684\u6DF1\u5EA6\uFF1D 4</p><h2 id="_7-2-\u6811\u7684\u8868\u793A\u6CD5" tabindex="-1"><a class="header-anchor" href="#_7-2-\u6811\u7684\u8868\u793A\u6CD5" aria-hidden="true">#</a> 7.2 \u6811\u7684\u8868\u793A\u6CD5</h2><h3 id="_7-2-1-\u56FE\u5F62\u8868\u793A\u6CD5" tabindex="-1"><a class="header-anchor" href="#_7-2-1-\u56FE\u5F62\u8868\u793A\u6CD5" aria-hidden="true">#</a> 7.2.1 \u56FE\u5F62\u8868\u793A\u6CD5</h3><p><strong>\u4E8B\u7269\u4E4B\u95F4\u7684\u903B\u8F91\u5173\u7CFB</strong>\u53EF\u4EE5\u901A\u8FC7\u6570\u7684\u5F62\u5F0F\u5F88\u76F4\u89C2\u7684\u8868\u793A\u51FA\u6765\uFF0C\u5982\u4E0B\u56FE\uFF1A</p><p><img src="'+t+'" alt="image-20220329225725203"></p><h3 id="_7-2-2-\u5E7F\u4E49\u8868\u8868\u793A\u6CD5" tabindex="-1"><a class="header-anchor" href="#_7-2-2-\u5E7F\u4E49\u8868\u8868\u793A\u6CD5" aria-hidden="true">#</a> 7.2.2 \u5E7F\u4E49\u8868\u8868\u793A\u6CD5</h3><p><img src="'+o+'" alt="image-20220329225737110"></p><p>\u7528\u5E7F\u4E49\u8868\u8868\u793A\u6CD5\u8868\u793A\u4E0A\u56FE</p><p>\u4E2D\u56FD\uFF08\u6CB3\u5317\uFF08\u4FDD\u5B9A\uFF0C\u77F3\u5BB6\u5E84\uFF09\uFF0C\u5E7F\u4E1C\uFF08\u5E7F\u5DDE\uFF0C\u4E1C\u839E\uFF09\uFF0C\u5C71\u4E1C\uFF08\u9752\u5C9B\uFF0C\u6D4E\u5357\uFF09\uFF09</p><p><strong>\u6839\u4F5C\u4E3A\u7531\u5B50\u6811\u68EE\u6797\u7EC4\u6210\u7684\u8868\u7684\u540D\u5B57\u5199\u5728\u8868\u7684\u5DE6\u8FB9\u3002</strong></p><h3 id="_7-2-3-\u5DE6\u5B69\u5B50\u53F3\u5B69\u5B50\u8868\u793A\u6CD5" tabindex="-1"><a class="header-anchor" href="#_7-2-3-\u5DE6\u5B69\u5B50\u53F3\u5B69\u5B50\u8868\u793A\u6CD5" aria-hidden="true">#</a> 7.2.3 \u5DE6\u5B69\u5B50\u53F3\u5B69\u5B50\u8868\u793A\u6CD5</h3><p><img src="'+e+'" alt="image-20220329225747886"></p><p>\u5DE6\u5B69\u5B50\u53F3\u5144\u5F1F\u8868\u793A\u6CD5\u53EF\u4EE5\u5C06\u4E00\u9897\u591A\u53C9\u6811\u8F6C\u5316\u4E3A\u4E00\u9897\u4E8C\u53C9\u6811\uFF1A</p><p><img src="'+c+'" alt="image-20220329225755491"></p><p>\u8282\u70B9\u7684\u7ED3\u6784\uFF1A</p><p><img src="'+l+'" alt="image-20220329225805269"></p><p>\u8282\u70B9\u6709\u4E24\u4E2A\u6307\u9488\u57DF\uFF0C\u5176\u4E2D\u4E00\u4E2A\u6307\u9488\u6307\u5411\u5B50\u8282\u70B9\uFF0C\u53E6\u4E00\u4E2A\u6307\u9488\u6307\u5411\u5176\u5144\u5F1F\u8282\u70B9\u3002</p><h2 id="_7-3-\u6811\u7684\u7ED3\u6784" tabindex="-1"><a class="header-anchor" href="#_7-3-\u6811\u7684\u7ED3\u6784" aria-hidden="true">#</a> 7.3 \u6811\u7684\u7ED3\u6784</h2><h3 id="_7-3-1-\u6811\u7684\u903B\u8F91\u7ED3\u6784" tabindex="-1"><a class="header-anchor" href="#_7-3-1-\u6811\u7684\u903B\u8F91\u7ED3\u6784" aria-hidden="true">#</a> 7.3.1 \u6811\u7684\u903B\u8F91\u7ED3\u6784</h3><p>\u6811\u7684\u903B\u8F91\u7ED3\u6784\u7279\u70B9\uFF1A</p><p>\u4E00\u5BF9\u591A\uFF081:n\uFF09\uFF0C\u6709\u591A\u4E2A\u76F4\u63A5\u540E\u7EE7\uFF08\u5982\u5BB6\u8C31\u6811\u3001\u76EE\u5F55\u6811\u7B49\u7B49\uFF09\uFF0C\u4F46\u53EA\u6709\u4E00\u4E2A\u6839\u7ED3\u70B9\uFF0C\u4E14\u5B50\u6811\u4E4B\u95F4\u4E92\u4E0D\u76F8\u4EA4\u3002</p><h3 id="_7-3-2-\u6811\u7684\u5B58\u50A8\u7ED3\u6784" tabindex="-1"><a class="header-anchor" href="#_7-3-2-\u6811\u7684\u5B58\u50A8\u7ED3\u6784" aria-hidden="true">#</a> 7.3.2 \u6811\u7684\u5B58\u50A8\u7ED3\u6784</h3><p>\u6811\u7684\u5B58\u50A8\u4ECD\u7136\u6709\u4E24\u79CD\u65B9\u5F0F\uFF1A</p><ul><li><p>\u987A\u5E8F\u5B58\u50A8</p><p>\u53EF\u89C4\u5B9A\u4E3A\uFF1A\u4ECE\u4E0A\u81F3\u4E0B\u3001\u4ECE\u5DE6\u81F3\u53F3\u5C06\u6811\u7684\u7ED3\u70B9\u4F9D\u6B21\u5B58\u5165\u5185\u5B58\u3002</p><p>\u91CD\u5927\u7F3A\u9677\uFF1A\u590D\u539F<strong>\u56F0\u96BE</strong>\uFF08\u4E0D\u80FD\u552F\u4E00\u590D\u539F\u5C31\u6CA1\u6709\u5B9E\u7528\u4EF7\u503C\uFF09\u3002</p></li><li><p>\u94FE\u5F0F\u5B58\u50A8</p></li></ul><p>\u53EF\u7528\u591A\u91CD\u94FE\u8868\uFF1A\u4E00\u4E2A\u524D\u8D8B\u6307\u9488\uFF0Cn \u4E2A\u540E\u7EE7\u6307\u9488\u3002</p><p>\u7EC6\u8282\u95EE\u9898\uFF1A\u6811\u4E2D\u7ED3\u70B9\u7684\u7ED3\u6784\u7C7B\u578B\u6837\u5F0F\u8BE5\u5982\u4F55\u8BBE\u8BA1\uFF1F</p><p>\u5373\u5E94\u8BE5\u8BBE\u8BA1\u6210\u201C\u7B49\u957F\u201D\u8FD8\u662F\u201C\u4E0D\u7B49\u957F\u201D\uFF1F</p><p>\u7F3A\u70B9\uFF1A\u7B49\u957F\u7ED3\u6784\u592A\u6D6A\u8D39\uFF08\u6BCF\u4E2A\u7ED3\u70B9\u7684\u5EA6\u4E0D\u4E00\u5B9A\u76F8\u540C\uFF09\uFF1B</p><p>\u4E0D\u7B49\u957F\u7ED3\u6784\u592A\u590D\u6742\uFF08\u8981\u5B9A\u4E49\u597D\u591A\u79CD\u7ED3\u6784\u7C7B\u578B\uFF09\u3002</p><p>\u4EE5\u4E0A\u4E24\u79CD\u5B58\u50A8\u65B9\u5F0F\u90FD\u5B58\u5728\u91CD\u5927\u7F3A\u9677\uFF0C\u5E94\u8BE5\u5982\u4F55\u89E3\u51B3\u5462\uFF1F</p><p>\u8BA1\u7B97\u673A\u5B9E\u73B0\u5404\u79CD\u4E0D\u540C\u8FDB\u5236\u7684\u8FD0\u7B97\u662F\u901A\u8FC7\u5148\u7814\u7A76\u6700\u7B80\u5355\u3001\u6700\u6709\u89C4\u5F8B\u7684\u4E8C\u8FDB\u5236\u8FD0\u7B97\u89C4\u5F8B\uFF0C\u7136\u540E\u8BBE\u6CD5\u628A\u5404\u79CD\u4E0D\u540C\u8FDB\u5236\u7684\u8FD0\u7B97\u8F6C\u5316\u4E8C\u8FDB\u5236\u8FD0\u7B97\u3002\u6811\u7684\u5B58\u50A8\u4E5F\u53EF\u4EE5\u901A\u8FC7\u5148\u7814\u7A76\u6700\u7B80\u5355\u3001\u6700\u6709\u89C4\u5F8B\u7684\u6811\uFF0C\u7136\u540E\u8BBE\u6CD5\u628A\u4E00\u822C\u7684\u6811\u8F6C\u5316\u4E3A\u8FD9\u79CD\u7B80\u5355\u7684\u6811\uFF0C\u8FD9\u79CD\u6811\u5C31\u662F<strong>\u4E8C\u53C9\u6811</strong>\u3002</p><h2 id="_7-4-\u4E8C\u53C9\u6811\u6982\u5FF5" tabindex="-1"><a class="header-anchor" href="#_7-4-\u4E8C\u53C9\u6811\u6982\u5FF5" aria-hidden="true">#</a> 7.4 \u4E8C\u53C9\u6811\u6982\u5FF5</h2><h3 id="_7-4-1-\u4E8C\u53C9\u6811\u57FA\u672C\u6982\u5FF5" tabindex="-1"><a class="header-anchor" href="#_7-4-1-\u4E8C\u53C9\u6811\u57FA\u672C\u6982\u5FF5" aria-hidden="true">#</a> 7.4.1 \u4E8C\u53C9\u6811\u57FA\u672C\u6982\u5FF5</h3><ul><li><strong>\u5B9A\u4E49\uFF1A</strong></li></ul><p>n\uFF08n\u22650\uFF09\u4E2A\u7ED3\u70B9\u7684\u6709\u9650\u96C6\u5408\uFF0C\u7531\u4E00\u4E2A\u6839\u7ED3\u70B9\u4EE5\u53CA\u4E24\u68F5\u4E92\u4E0D\u76F8\u4EA4\u7684\u3001\u5206\u522B\u79F0\u4E3A\u5DE6\u5B50\u6811\u548C\u53F3\u5B50\u6811\u7684\u4E8C\u53C9\u6811\u7EC4\u6210 \u3002</p><p><strong>\u903B\u8F91\u7ED3\u6784\uFF1A</strong></p><p>\u4E00\u5BF9\u4E8C\uFF081\uFF1A2\uFF09</p><p><strong>\u57FA\u672C\u7279\u5F81:</strong></p><ul><li><p>\u6BCF\u4E2A\u7ED3\u70B9\u6700\u591A\u53EA\u6709\u4E24\u68F5\u5B50\u6811\uFF08<strong>\u4E0D\u5B58\u5728\u5EA6\u5927\u4E8E2\u7684\u7ED3\u70B9</strong>\uFF09\uFF1B</p></li><li><p>\u5DE6\u5B50\u6811\u548C\u53F3\u5B50\u6811\u6B21\u5E8F\u4E0D\u80FD\u98A0\u5012\uFF08<strong>\u6709\u5E8F\u6811</strong>\uFF09\u3002</p></li></ul><p><strong>\u57FA\u672C\u5F62\u6001</strong></p><p><img src="'+u+'" alt="image-20220329225823460"></p><p><strong>\u95EE\u9898\uFF1A</strong></p><p>\u5177\u6709\u4E09\u4E2A\u8282\u70B9\u7684\u4E8C\u53C9\u6811\u53EF\u80FD\u6709\u51E0\u79CD\u4E0D\u540C\u5F62\u6001\uFF1F\u666E\u901A\u6811\u5462\uFF1F</p><p><img src="'+r+'" alt="image-20220329225839731"></p><p>\u4E8C\u53C9\u6811\u53EF\u4EE5\u753B\u51FA\u4E94\u79CD\u5F62\u6001\uFF0C\u4F46\u662F \u666E\u901A\u7684\u6811\u53EA\u80FD\u6709\u4E24\u79CD\u5F62\u6001</p><p><strong>\u4E8C\u53C9\u6811\u6027\u8D28</strong></p><ul><li><p>\u6027\u8D281: \u5728\u4E8C\u53C9\u6811\u7684\u7B2Ci\u5C42\u4E0A\u81F3\u591A\u67092<sup>i-1</sup>&gt;\u4E2A\u7ED3\u70B9\uFF08i&gt;0\uFF09</p></li><li><p>\u6027\u8D282: \u6DF1\u5EA6\u4E3Ak\u7684\u4E8C\u53C9\u6811\u81F3\u591A\u67092<sup>k</sup>-1\u4E2A\u7ED3\u70B9\uFF08k&gt;0\uFF09</p></li><li><p>\u6027\u8D283: \u5BF9\u4E8E\u4EFB\u4F55\u4E00\u68F5\u4E8C\u53C9\u6811\uFF0C\u82E5\u5EA6\u4E3A2\u7684\u7ED3\u70B9\u6570\u6709n2\u4E2A\uFF0C\u5219\u53F6\u5B50\u6570\uFF08n0\uFF09\u5FC5\u5B9A\u4E3An2\uFF0B1 \uFF08\u5373n0=n2+1\uFF09</p></li></ul><p><strong>\u6982\u5FF5\u89E3\u91CA\uFF1A</strong></p><p><strong>\u6EE1\u4E8C\u53C9\u6811</strong></p><p>\u4E00\u68F5\u6DF1\u5EA6\u4E3Ak \u4E14\u67092<sup>k</sup> -1\u4E2A\u7ED3\u70B9\u7684\u4E8C\u53C9\u6811\u3002</p><p><strong>\u7279\u70B9\uFF1A\u6BCF\u5C42\u90FD\u201C\u5145\u6EE1\u201D\u4E86\u7ED3\u70B9</strong></p><p><img src="'+i+'" alt="image-20220329225850881"></p><p><strong>\u5B8C\u5168\u4E8C\u53C9\u6811</strong></p><p>\u9664\u6700\u540E\u4E00\u5C42\u5916\uFF0C\u6BCF\u4E00\u5C42\u4E0A\u7684\u8282\u70B9\u6570\u5747\u8FBE\u5230\u6700\u5927\u503C\uFF1B\u5728\u6700\u540E\u4E00\u5C42\u4E0A\u53EA\u7F3A\u5C11\u53F3\u8FB9\u7684\u82E5\u5E72</p><p>\u7ED3\u70B9\u3002</p><p><img src="'+k+'" alt="img"></p><p><strong>\u7406\u89E3\uFF1Ak-1 \u5C42\u4E0E\u6EE1\u4E8C\u53C9\u6811\u5B8C\u5168\u76F8\u540C\uFF0C\u7B2C k \u5C42\u7ED3\u70B9\u5C3D\u529B\u9760\u5DE6</strong></p><p><strong>\u6027\u8D28 4: \u5177\u6709 n \u4E2A\u7ED3\u70B9\u7684\u5B8C\u5168\u4E8C\u53C9\u6811\u7684\u6DF1\u5EA6\u5FC5\u4E3A [log<sub>2</sub>n]+1</strong></p><ul><li><strong>\u6027\u8D28 5: \u5BF9\u5B8C\u5168\u4E8C\u53C9\u6811\uFF0C\u82E5\u4ECE\u4E0A\u81F3\u4E0B\u3001\u4ECE\u5DE6\u81F3\u53F3\u7F16\u53F7\uFF0C\u5219\u7F16\u53F7\u4E3A i \u7684\u7ED3\u70B9\uFF0C\u5176\u5DE6\u5B69</strong></li></ul><p><strong>\u5B50\u7F16\u53F7\u5FC5\u4E3A 2i\uFF0C\u5176\u53F3\u5B69\u5B50\u7F16\u53F7\u5FC5\u4E3A 2i\uFF0B1\uFF1B\u5176\u53CC\u4EB2\u7684\u7F16\u53F7\u5FC5\u4E3A i/2\uFF08i\uFF1D1 \u65F6\u4E3A\u6839,\u9664\u5916\uFF09</strong></p><p><img src="'+b+'" alt="image-20220329230524471"></p><p>\u4F7F\u7528\u6B64\u6027\u8D28\u53EF\u4EE5\u4F7F\u7528\u5B8C\u5168\u4E8C\u53C9\u6811\u5B9E\u73B0\u6811\u7684\u987A\u5E8F\u5B58\u50A8\u3002</p><p>\u5982\u679C\u4E0D\u662F\u5B8C\u5168\u4E8C\u53C9\u6811\u548B\u6574???</p><p>------ \u5C06\u5176\u8F6C\u6362\u6210\u5B8C\u5168\u4E8C\u53C9\u6811\u5373\u53EF</p><p><img src="'+m+'" alt="image-20220329230553586"></p><p><strong>\u7F3A\u70B9\uFF1A\u2460\u6D6A\u8D39\u7A7A\u95F4\uFF1B\u2461\u63D2\u5165\u3001\u5220\u9664\u4E0D\u4FBF</strong></p><h3 id="_7-4-2-\u4E8C\u53C9\u6811\u7684\u8868\u793A" tabindex="-1"><a class="header-anchor" href="#_7-4-2-\u4E8C\u53C9\u6811\u7684\u8868\u793A" aria-hidden="true">#</a> 7.4.2 \u4E8C\u53C9\u6811\u7684\u8868\u793A</h3><ul><li>\u4E8C\u53C9\u94FE\u8868\u793A\u6CD5</li></ul><p>\u4E00\u822C\u4ECE\u6839\u7ED3\u70B9\u5F00\u59CB\u5B58\u50A8\u3002\u76F8\u5E94\u5730\uFF0C\u8BBF\u95EE\u6811\u4E2D\u7ED3\u70B9\u65F6\u4E5F\u53EA\u80FD\u4ECE\u6839\u5F00\u59CB\u3002</p><ul><li>\u5B58\u50A8\u7ED3\u6784</li></ul><p><img src="'+d+`" alt="image-20220329230606074"></p><ul><li>\u8282\u70B9\u6570\u636E\u7C7B\u578B\u5B9A\u4E49\uFF1A</li></ul><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">BiTNode</span>
<span class="token punctuation">{</span>
<span class="token keyword">int</span> data<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">BiTNode</span> <span class="token operator">*</span>lchild<span class="token punctuation">,</span> <span class="token operator">*</span>rchild<span class="token punctuation">;</span>
<span class="token punctuation">}</span>BiTNode<span class="token punctuation">,</span> <span class="token operator">*</span>BiTree<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>\u4E09\u53C9\u94FE\u8868\u8868\u793A\u6CD5 <ul><li>\u5B58\u50A8\u7ED3\u6784</li></ul></li></ul><p><img src="`+h+`" alt="image-20220329230616120"></p><p>\u6BCF\u4E2A\u8282\u70B9\u6709\u4E09\u4E2A\u6307\u9488\u57DF\uFF0C\u5176\u4E2D\u4E24\u4E2A\u5206\u522B\u6307\u5411\u5B50\u8282\u70B9\uFF08\u5DE6\u5B69\u5B50\uFF0C\u53F3\u5B69\u5B50\uFF09\uFF0C\u8FD8\u6709\u4E00\u5171</p><p>\u6307\u9488\u6307\u5411\u8BE5\u8282\u70B9\u7684\u7236\u8282\u70B9\u3002</p><ul><li>\u8282\u70B9\u6570\u636E\u7C7B\u578B\u5B9A\u4E49</li></ul><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u4E09\u53C9\u94FE\u8868</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">TriTNode</span>
<span class="token punctuation">{</span>
<span class="token keyword">int</span> data<span class="token punctuation">;</span>
<span class="token comment">//\u5DE6\u53F3\u5B69\u5B50\u6307\u9488</span>
<span class="token keyword">struct</span> <span class="token class-name">TriTNode</span> <span class="token operator">*</span>lchild<span class="token punctuation">,</span> <span class="token operator">*</span>rchild<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">TriTNode</span> <span class="token operator">*</span>parent<span class="token punctuation">;</span>
<span class="token punctuation">}</span>TriTNode<span class="token punctuation">,</span> <span class="token operator">*</span>TriTree<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_7-4-3\u4E8C\u53C9\u6811\u7684\u904D\u5386" tabindex="-1"><a class="header-anchor" href="#_7-4-3\u4E8C\u53C9\u6811\u7684\u904D\u5386" aria-hidden="true">#</a> 7.4.3\u4E8C\u53C9\u6811\u7684\u904D\u5386</h3><p>\u904D\u5386\u5B9A\u4E49</p><p>\u6307\u6309\u67D0\u6761\u641C\u7D22\u8DEF\u7EBF<strong>\u904D\u8BBF\u6BCF\u4E2A\u7ED3\u70B9\u4E14\u4E0D\u91CD\u590D</strong>\uFF08\u53C8\u79F0\u5468\u6E38\uFF09\u3002</p><p>\u904D\u5386\u7528\u9014</p><p>\u5B83\u662F\u6811\u7ED3\u6784\u63D2\u5165\u3001\u5220\u9664\u3001\u4FEE\u6539\u3001\u67E5\u627E\u548C\u6392\u5E8F\u8FD0\u7B97\u7684\u524D\u63D0\uFF0C\u662F\u4E8C\u53C9\u6811\u4E00\u5207\u8FD0\u7B97\u7684\u57FA\u7840\u548C\u6838</p><p>\u5FC3\u3002</p><p>\u904D\u5386\u65B9\u6CD5</p><p>\u7262\u8BB0\u4E00\u79CD\u7EA6\u5B9A\uFF0C<strong>\u5BF9\u6BCF\u4E2A\u7ED3\u70B9\u7684\u67E5\u770B\u90FD\u662F\u201C\u5148\u5DE6\u540E\u53F3\u201D</strong> \u3002</p><p>\u9650\u5B9A\u5148\u5DE6\u540E\u53F3\uFF0C\u6811\u7684\u904D\u5386\u6709\u4E09\u79CD\u5B9E\u73B0\u65B9\u6848\uFF1A</p><p>\u200B <strong>D</strong>LR L<strong>D</strong>R LR<strong>D</strong></p><p><strong>\u5148</strong> (<strong>\u6839</strong>)\u5E8F\u904D\u5386 <strong>\u4E2D</strong> (<strong>\u6839</strong>)\u5E8F\u904D\u5386 <strong>\u540E</strong>(<strong>\u6839</strong>)\u5E8F\u904D\u5386</p><p><strong>DLR \u2014 \u5148\u5E8F\u904D\u5386\uFF0C\u5373\u5148\u6839\u518D\u5DE6\u518D\u53F3</strong></p><p><strong>LDR \u2014 \u4E2D\u5E8F\u904D\u5386\uFF0C\u5373\u5148\u5DE6\u518D\u6839\u518D\u53F3</strong></p><p><strong>LRD \u2014 \u540E\u5E8F\u904D\u5386\uFF0C\u5373\u5148\u5DE6\u518D\u53F3\u518D\u6839</strong></p><p><strong>\u6CE8\uFF1A\u201C\u5148\u3001\u4E2D\u3001\u540E\u201D\u7684\u610F\u601D\u662F\u6307\u8BBF\u95EE\u7684\u7ED3\u70B9 D \u662F\u5148\u4E8E\u5B50\u6811\u51FA\u73B0\u8FD8\u662F\u540E\u4E8E\u5B50\u6811\u51FA\u73B0\u3002</strong></p><p><strong>\u4ECE\u9012\u5F52\u7684\u89D2\u5EA6\u770B\uFF0C\u8FD9\u4E09\u79CD\u7B97\u6CD5\u662F\u5B8C\u5168\u76F8\u540C\u7684\uFF0C\u6216\u8005\u8BF4\u8FD9\u4E09\u79CD\u904D\u5386\u7B97\u6CD5\u7684\u8BBF\u95EE\u8DEF\u5F84\u662F\u76F8\u540C\u7684\uFF0C\u53EA\u662F\u8BBF\u95EE\u7ED3\u70B9\u7684\u65F6\u673A\u4E0D\u540C\u3002</strong></p><p><img src="`+g+'" alt="image-20220329230635252"></p><p>\u4ECE\u865A\u7EBF\u7684\u51FA\u53D1\u70B9\u5230\u7EC8\u70B9\u7684\u8DEF\u5F84\u4E0A\uFF0C\u6BCF\u4E2A\u7ED3\u70B9\u7ECF\u8FC7 3 \u6B21\u3002</p><ul><li><p><strong>\u7B2C 1 \u6B21\u7ECF\u8FC7\u65F6\u8BBF\u95EE\uFF1D\u5148\u5E8F\u904D\u5386</strong></p></li><li><p><strong>\u7B2C 2 \u6B21\u7ECF\u8FC7\u65F6\u8BBF\u95EE\uFF1D\u4E2D\u5E8F\u904D\u5386</strong></p></li><li><p><strong>\u7B2C 3 \u6B21\u7ECF\u8FC7\u65F6\u8BBF\u95EE\uFF1D\u540E\u5E8F\u904D\u5386</strong></p></li></ul><p><img src="'+y+`" alt="image-20220329230713884"></p><p><strong>\u6848\u4F8B</strong></p><p>\u4EE3\u7801\uFF1A</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h&gt;</span></span>
<span class="token comment">//\u4E8C\u53C9\u6811\u7ED3\u70B9 \u4E8C\u53C9\u94FE\u8868</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_PTNode</span><span class="token punctuation">{</span>
<span class="token keyword">char</span> ch<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">_PTNode</span><span class="token operator">*</span> lchild<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">_PTNode</span><span class="token operator">*</span> rchild<span class="token punctuation">;</span>
<span class="token punctuation">}</span>PTNode<span class="token punctuation">;</span>
<span class="token comment">//\u9012\u5F52\u904D\u5386</span>
<span class="token keyword">void</span> <span class="token function">RecursionBiTree</span><span class="token punctuation">(</span>PTNode<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c&quot;</span><span class="token punctuation">,</span> root<span class="token operator">-&gt;</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//\u5148\u5E8F\u904D\u5386</span>
<span class="token function">RecursionBiTree</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//printf(&quot;%c&quot;, root-&gt;ch); //\u4E2D\u5E8F\u904D\u5386</span>
<span class="token function">RecursionBiTree</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//printf(&quot;%c&quot;, root-&gt;ch); //\u540E\u5E8F\u904D\u5386</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u6D4B\u8BD5</span>
<span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment">//\u521B\u5EFA\u7ED3\u70B9</span>
PTNode node1<span class="token punctuation">,</span> node2<span class="token punctuation">,</span> node3<span class="token punctuation">,</span> node4<span class="token punctuation">,</span> node5<span class="token punctuation">,</span> node6<span class="token punctuation">,</span> node7<span class="token punctuation">,</span> node8<span class="token punctuation">;</span>
node1<span class="token punctuation">.</span>ch <span class="token operator">=</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">;</span> node1<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> node1<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
node2<span class="token punctuation">.</span>ch <span class="token operator">=</span> <span class="token char">&#39;B&#39;</span><span class="token punctuation">;</span> node2<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> node2<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
node3<span class="token punctuation">.</span>ch <span class="token operator">=</span> <span class="token char">&#39;C&#39;</span><span class="token punctuation">;</span> node3<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> node3<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
node4<span class="token punctuation">.</span>ch <span class="token operator">=</span> <span class="token char">&#39;D&#39;</span><span class="token punctuation">;</span> node4<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> node4<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
node5<span class="token punctuation">.</span>ch <span class="token operator">=</span> <span class="token char">&#39;E&#39;</span><span class="token punctuation">;</span> node5<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> node5<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
node6<span class="token punctuation">.</span>ch <span class="token operator">=</span> <span class="token char">&#39;F&#39;</span><span class="token punctuation">;</span> node6<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> node6<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
node7<span class="token punctuation">.</span>ch <span class="token operator">=</span> <span class="token char">&#39;G&#39;</span><span class="token punctuation">;</span> node7<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> node7<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
node8<span class="token punctuation">.</span>ch <span class="token operator">=</span> <span class="token char">&#39;H&#39;</span><span class="token punctuation">;</span> node8<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> node8<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token comment">//\u5EFA\u7ACB\u7ED3\u70B9\u5173\u7CFB</span>
node1<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token operator">&amp;</span>node2<span class="token punctuation">;</span>
node1<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token operator">&amp;</span>node6<span class="token punctuation">;</span>
node2<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
node2<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token operator">&amp;</span>node3<span class="token punctuation">;</span>
node3<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token operator">&amp;</span>node4<span class="token punctuation">;</span>
node3<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token operator">&amp;</span>node5<span class="token punctuation">;</span>
node6<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
node6<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token operator">&amp;</span>node7<span class="token punctuation">;</span>
node7<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token operator">&amp;</span>node8<span class="token punctuation">;</span>
node7<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token function">RecursionBiTree</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>node1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br></div></div><p><strong>\u975E\u9012\u5F52\u524D\u5E8F\u904D\u5386\uFF1A</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&quot;LinkStack.h&quot;</span></span>
<span class="token comment">//\u4E8C\u53C9\u6811\u7ED3\u70B9 \u4E8C\u53C9\u94FE\u8868</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_PTNode</span><span class="token punctuation">{</span>
<span class="token keyword">char</span> ch<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">_PTNode</span><span class="token operator">*</span> lchild<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">_PTNode</span><span class="token operator">*</span> rchild<span class="token punctuation">;</span>
<span class="token punctuation">}</span>PTNode<span class="token punctuation">;</span>
<span class="token comment">//\u9012\u5F52\u904D\u5386</span>
<span class="token keyword">void</span> <span class="token function">RecursionBiTree</span><span class="token punctuation">(</span>PTNode<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token comment">//printf(&quot;%c&quot;, root-&gt;ch); //\u5148\u5E8F\u904D\u5386</span>
<span class="token function">RecursionBiTree</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c&quot;</span><span class="token punctuation">,</span> root<span class="token operator">-&gt;</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//\u4E2D\u5E8F\u904D\u5386</span>
<span class="token function">RecursionBiTree</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//printf(&quot;%c&quot;, root-&gt;ch); //\u540E\u5E8F\u904D\u5386</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u975E\u9012\u5F52\u7684\u65B9\u5F0F\u904D\u5386\u4E8C\u53C9\u6811</span>
<span class="token keyword">void</span> <span class="token function">NonRecursion01</span><span class="token punctuation">(</span>PTNode<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment">//\u521B\u5EFA\u6808</span>
LinkStack<span class="token operator">*</span> stack <span class="token operator">=</span> <span class="token function">InitLinkStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
PTNode<span class="token operator">*</span> pChild <span class="token operator">=</span> root<span class="token punctuation">;</span>
<span class="token function">PushLinkStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IsEmptyLinkStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span> <span class="token operator">||</span> pChild <span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>pChild <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c\\n&quot;</span><span class="token punctuation">,</span>pChild<span class="token operator">-&gt;</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>pChild <span class="token operator">!=</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token function">PushLinkStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> pChild<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
pChild <span class="token operator">=</span> pChild<span class="token operator">-&gt;</span>lchild<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IsEmptyLinkStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
pChild <span class="token operator">=</span> <span class="token punctuation">(</span>PTNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">TopLinkStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">PopLinkStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
pChild <span class="token operator">=</span> pChild<span class="token operator">-&gt;</span>rchild<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token comment">//\u6D4B\u8BD5</span>
<span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment">//\u521B\u5EFA\u7ED3\u70B9</span>
PTNode node1<span class="token punctuation">,</span> node2<span class="token punctuation">,</span> node3<span class="token punctuation">,</span> node4<span class="token punctuation">,</span> node5<span class="token punctuation">,</span> node6<span class="token punctuation">,</span> node7<span class="token punctuation">,</span> node8<span class="token punctuation">;</span>
node1<span class="token punctuation">.</span>ch <span class="token operator">=</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">;</span> node1<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> node1<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
node2<span class="token punctuation">.</span>ch <span class="token operator">=</span> <span class="token char">&#39;B&#39;</span><span class="token punctuation">;</span> node2<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> node2<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
node3<span class="token punctuation">.</span>ch <span class="token operator">=</span> <span class="token char">&#39;C&#39;</span><span class="token punctuation">;</span> node3<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> node3<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
node4<span class="token punctuation">.</span>ch <span class="token operator">=</span> <span class="token char">&#39;D&#39;</span><span class="token punctuation">;</span> node4<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> node4<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
node5<span class="token punctuation">.</span>ch <span class="token operator">=</span> <span class="token char">&#39;E&#39;</span><span class="token punctuation">;</span> node5<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> node5<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
node6<span class="token punctuation">.</span>ch <span class="token operator">=</span> <span class="token char">&#39;F&#39;</span><span class="token punctuation">;</span> node6<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> node6<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
node7<span class="token punctuation">.</span>ch <span class="token operator">=</span> <span class="token char">&#39;G&#39;</span><span class="token punctuation">;</span> node7<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> node7<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
node8<span class="token punctuation">.</span>ch <span class="token operator">=</span> <span class="token char">&#39;H&#39;</span><span class="token punctuation">;</span> node8<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> node8<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token comment">//\u5EFA\u7ACB\u7ED3\u70B9\u5173\u7CFB</span>
node1<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token operator">&amp;</span>node2<span class="token punctuation">;</span>
node1<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token operator">&amp;</span>node6<span class="token punctuation">;</span>
node2<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
node2<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token operator">&amp;</span>node3<span class="token punctuation">;</span>
node3<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token operator">&amp;</span>node4<span class="token punctuation">;</span>
node3<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token operator">&amp;</span>node5<span class="token punctuation">;</span>
node6<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
node6<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token operator">&amp;</span>node7<span class="token punctuation">;</span>
node7<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token operator">&amp;</span>node8<span class="token punctuation">;</span>
node7<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token comment">//\u975E\u9012\u5F52\u524D\u5E8F\u904D\u5386</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n \u975E\u9012\u5F52\u524D\u5E8F\u904D\u5386:\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">NonRecursion01</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>node1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br></div></div><h3 id="_7-4-5-\u4E8C\u53C9\u6811\u7F16\u7A0B\u5B9E\u6218" tabindex="-1"><a class="header-anchor" href="#_7-4-5-\u4E8C\u53C9\u6811\u7F16\u7A0B\u5B9E\u6218" aria-hidden="true">#</a> 7.4.5 \u4E8C\u53C9\u6811\u7F16\u7A0B\u5B9E\u6218</h3><p><strong>\u6848\u4F8B\u4E00\uFF1A\u8BA1\u7B97\u4E8C\u53C9\u6811\u4E2D\u53F6\u5B50\u8282\u70B9\u6570\u76EE</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h&gt;</span></span>
<span class="token comment">//\u4E8C\u53C9\u6811\u7ED3\u70B9 \u4E8C\u53C9\u94FE\u8868</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_PTNode</span><span class="token punctuation">{</span>
<span class="token keyword">char</span> ch<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">_PTNode</span><span class="token operator">*</span> lchild<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">_PTNode</span><span class="token operator">*</span> rchild<span class="token punctuation">;</span>
<span class="token punctuation">}</span>PTNode<span class="token punctuation">;</span>
<span class="token comment">//\u6C42\u53F6\u5B50\u7ED3\u70B9\u6570\u91CF</span>
<span class="token keyword">int</span> leafNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">RecursionBiTree</span><span class="token punctuation">(</span>PTNode<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token operator">-&gt;</span>lchild <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>root<span class="token operator">-&gt;</span>rchild<span class="token punctuation">)</span><span class="token punctuation">{</span>
leafNum<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">RecursionLeafNumTree</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">RecursionLeafNumTree</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u6D4B\u8BD5</span>
<span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment">//\u521B\u5EFA\u7ED3\u70B9</span>
PTNode node1<span class="token punctuation">,</span> node2<span class="token punctuation">,</span> node3<span class="token punctuation">,</span> node4<span class="token punctuation">,</span> node5<span class="token punctuation">,</span> node6<span class="token punctuation">,</span> node7<span class="token punctuation">,</span> node8<span class="token punctuation">;</span>
node1<span class="token punctuation">.</span>ch <span class="token operator">=</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">;</span> node1<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> node1<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
node2<span class="token punctuation">.</span>ch <span class="token operator">=</span> <span class="token char">&#39;B&#39;</span><span class="token punctuation">;</span> node2<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> node2<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
node3<span class="token punctuation">.</span>ch <span class="token operator">=</span> <span class="token char">&#39;C&#39;</span><span class="token punctuation">;</span> node3<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> node3<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
node4<span class="token punctuation">.</span>ch <span class="token operator">=</span> <span class="token char">&#39;D&#39;</span><span class="token punctuation">;</span> node4<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> node4<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
node5<span class="token punctuation">.</span>ch <span class="token operator">=</span> <span class="token char">&#39;E&#39;</span><span class="token punctuation">;</span> node5<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> node5<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
node6<span class="token punctuation">.</span>ch <span class="token operator">=</span> <span class="token char">&#39;F&#39;</span><span class="token punctuation">;</span> node6<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> node6<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
node7<span class="token punctuation">.</span>ch <span class="token operator">=</span> <span class="token char">&#39;G&#39;</span><span class="token punctuation">;</span> node7<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> node7<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
node8<span class="token punctuation">.</span>ch <span class="token operator">=</span> <span class="token char">&#39;H&#39;</span><span class="token punctuation">;</span> node8<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> node8<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token comment">//\u5EFA\u7ACB\u7ED3\u70B9\u5173\u7CFB</span>
node1<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token operator">&amp;</span>node2<span class="token punctuation">;</span>
node1<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token operator">&amp;</span>node6<span class="token punctuation">;</span>
node2<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
node2<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token operator">&amp;</span>node3<span class="token punctuation">;</span>
node3<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token operator">&amp;</span>node4<span class="token punctuation">;</span>
node3<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token operator">&amp;</span>node5<span class="token punctuation">;</span>
node6<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
node6<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token operator">&amp;</span>node7<span class="token punctuation">;</span>
node7<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token operator">&amp;</span>node8<span class="token punctuation">;</span>
node7<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token function">RecursionBiTree</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>node1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//\u6C42\u53F6\u5B50\u7ED3\u70B9\u4E66\u76EE</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\u53F6\u5B50\u7ED3\u70B9\u6570\u91CF:%d\\n&quot;</span><span class="token punctuation">,</span>leafNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br></div></div><p><strong>\u601D\u60F3\uFF1A</strong></p><ul><li><p>\u6C42\u6839\u7ED3\u70B9\u5DE6\u5B50\u6811\u7684\u53F6\u5B50\u7ED3\u70B9\u4E2A\u6570\uFF0C\u7D2F\u8BA1\u5230 sum \u4E2D\uFF0C\u6C42\u6839\u7ED3\u70B9\u53F3\u5B50\u6811\u7684\u53F6\u5B50\u7ED3\u70B9\u4E2A\u6570\u7D2F\u8BA1\u5230 sum \u4E2D\u3002</p></li><li><p>\u82E5\u5DE6\u5B50\u6811\u8FD8\u662F\u6811\uFF0C\u91CD\u590D\u6B65\u9AA4 1\uFF1B\u82E5\u53F3\u5B50\u6811\u8FD8\u662F\u6811\uFF0C\u91CD\u590D\u6B65\u9AA4 1\u3002</p></li><li><p><strong>\u5168\u5C40\u53D8\u91CF\u8F6C\u6210\u51FD\u6570\u53C2\u6570</strong></p></li><li><p>\u53EF\u4EE5\u6309\u7167\u5148\u5E8F\u3001\u4E2D\u5E8F\u3001\u540E\u5E8F\u65B9\u5F0F\u8BA1\u7B97\u53F6\u5B50\u7ED3\u70B9</p></li></ul><p><strong>\u4E09\u79CD\u904D\u5386\u7684\u672C\u8D28\u601D\u60F3\u5F3A\u5316\uFF1A\u8BBF\u95EE\u7ED3\u70B9\u7684\u8DEF\u5F84\u90FD\u662F\u4E00\u6837\u7684\uFF0C\u8BA1\u7B97\u7ED3\u70B9\u7684\u65F6\u673A\u4E0D\u540C\u3002</strong></p><p><strong>\u6848\u4F8B\u4E8C\uFF1A\u6C42\u4E8C\u53C9\u6811\u7684\u6DF1\u5EA6</strong></p><p><strong>\u601D\u60F3\uFF1A</strong></p><ul><li><p>\u6C42\u6839\u7ED3\u70B9\u5DE6\u5B50\u6811\u9AD8\u5EA6\uFF0C\u6839\u7ED3\u70B9\u53F3\u5B50\u6811\u9AD8\u5EA6\uFF0C\u6BD4\u8F83\u7684\u5B50\u6811\u6700\u5927\u9AD8\u5EA6\uFF0C\u518D+1\u3002</p></li><li><p>\u82E5\u5DE6\u5B50\u6811\u8FD8\u662F\u6811\uFF0C\u91CD\u590D\u6B65\u9AA4 1\uFF1B\u82E5\u53F3\u5B50\u6811\u8FD8\u662F\u6811\uFF0C\u91CD\u590D\u6B65\u9AA4 1\u3002</p></li></ul><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h&gt;</span></span>
<span class="token comment">//\u4E8C\u53C9\u6811\u7ED3\u70B9 \u4E8C\u53C9\u94FE\u8868</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_PTNode</span><span class="token punctuation">{</span>
<span class="token keyword">char</span> ch<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">_PTNode</span><span class="token operator">*</span> lchild<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">_PTNode</span><span class="token operator">*</span> rchild<span class="token punctuation">;</span>
<span class="token punctuation">}</span>PTNode<span class="token punctuation">;</span>
<span class="token comment">//\u6C42\u4E8C\u53C9\u6811\u6DF1\u5EA6</span>
<span class="token keyword">int</span> <span class="token function">RecursionTreeDepth</span><span class="token punctuation">(</span>PTNode<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">int</span> depth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">return</span> depth<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> ldepth <span class="token operator">=</span> <span class="token function">RecursionTreeDepth</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> rdepth <span class="token operator">=</span> <span class="token function">RecursionTreeDepth</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
depth <span class="token operator">=</span> ldepth <span class="token operator">&gt;=</span> rdepth <span class="token operator">?</span> ldepth <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> rdepth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> depth<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u6D4B\u8BD5</span>
<span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment">//\u521B\u5EFA\u7ED3\u70B9</span>
PTNode node1<span class="token punctuation">,</span> node2<span class="token punctuation">,</span> node3<span class="token punctuation">,</span> node4<span class="token punctuation">,</span> node5<span class="token punctuation">,</span> node6<span class="token punctuation">,</span> node7<span class="token punctuation">,</span> node8<span class="token punctuation">;</span>
node1<span class="token punctuation">.</span>ch <span class="token operator">=</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">;</span> node1<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> node1<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
node2<span class="token punctuation">.</span>ch <span class="token operator">=</span> <span class="token char">&#39;B&#39;</span><span class="token punctuation">;</span> node2<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> node2<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
node3<span class="token punctuation">.</span>ch <span class="token operator">=</span> <span class="token char">&#39;C&#39;</span><span class="token punctuation">;</span> node3<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> node3<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
node4<span class="token punctuation">.</span>ch <span class="token operator">=</span> <span class="token char">&#39;D&#39;</span><span class="token punctuation">;</span> node4<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> node4<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
node5<span class="token punctuation">.</span>ch <span class="token operator">=</span> <span class="token char">&#39;E&#39;</span><span class="token punctuation">;</span> node5<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> node5<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
node6<span class="token punctuation">.</span>ch <span class="token operator">=</span> <span class="token char">&#39;F&#39;</span><span class="token punctuation">;</span> node6<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> node6<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
node7<span class="token punctuation">.</span>ch <span class="token operator">=</span> <span class="token char">&#39;G&#39;</span><span class="token punctuation">;</span> node7<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> node7<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
node8<span class="token punctuation">.</span>ch <span class="token operator">=</span> <span class="token char">&#39;H&#39;</span><span class="token punctuation">;</span> node8<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> node8<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token comment">//\u5EFA\u7ACB\u7ED3\u70B9\u5173\u7CFB</span>
node1<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token operator">&amp;</span>node2<span class="token punctuation">;</span>
node1<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token operator">&amp;</span>node6<span class="token punctuation">;</span>
node2<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
node2<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token operator">&amp;</span>node3<span class="token punctuation">;</span>
node3<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token operator">&amp;</span>node4<span class="token punctuation">;</span>
node3<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token operator">&amp;</span>node5<span class="token punctuation">;</span>
node6<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
node6<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token operator">&amp;</span>node7<span class="token punctuation">;</span>
node7<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token operator">&amp;</span>node8<span class="token punctuation">;</span>
node7<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> depth <span class="token operator">=</span> <span class="token function">RecursionTreeDepth</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>node1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\u6811\u7684\u6DF1\u5EA6\u4E3A:%d\\n&quot;</span><span class="token punctuation">,</span>depth<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br></div></div><p><strong>\u6848\u4F8B\u4E09\uFF1ACopy\u4E8C\u53C9\u6811</strong></p><p>\u601D\u60F3\uFF1A</p><ul><li><p>malloc \u65B0\u7ED3\u70B9\uFF0C</p></li><li><p>\u62F7\u8D1D\u5DE6\u5B50\u6811\uFF0C\u62F7\u8D1D\u53F3\u5B50\u6811\uFF0C\u8BA9\u65B0\u7ED3\u70B9\u8FDE\u63A5\u5DE6\u5B50\u6811\uFF0C\u53F3\u5B50\u6811\u3002</p></li></ul><p>\u82E5\u5DE6\u5B50\u6811\u8FD8\u662F\u6811\uFF0C\u91CD\u590D\u6B65\u9AA4 1\u30012\uFF1B\u82E5\u53F3\u5B50\u6811\u8FD8\u662F\u6811\uFF0C\u91CD\u590D\u6B65\u9AA4 1\u30012\u3002</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h&gt;</span></span>
<span class="token comment">//\u4E8C\u53C9\u6811\u7ED3\u70B9 \u4E8C\u53C9\u94FE\u8868</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_PTNode</span><span class="token punctuation">{</span>
<span class="token keyword">char</span> ch<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">_PTNode</span><span class="token operator">*</span> lchild<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">_PTNode</span><span class="token operator">*</span> rchild<span class="token punctuation">;</span>
<span class="token punctuation">}</span>PTNode<span class="token punctuation">;</span>
<span class="token comment">//\u9012\u5F52\u904D\u5386</span>
<span class="token keyword">void</span> <span class="token function">RecursionBiTree</span><span class="token punctuation">(</span>PTNode<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c&quot;</span><span class="token punctuation">,</span> root<span class="token operator">-&gt;</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//\u5148\u5E8F\u904D\u5386</span>
<span class="token function">RecursionBiTree</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//printf(&quot;%c&quot;, root-&gt;ch); //\u4E2D\u5E8F\u904D\u5386</span>
<span class="token function">RecursionBiTree</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//printf(&quot;%c&quot;, root-&gt;ch); //\u540E\u5E8F\u904D\u5386</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u62F7\u8D1D\u4E8C\u53C9\u6811</span>
PTNode<span class="token operator">*</span> <span class="token function">CopyTree</span><span class="token punctuation">(</span>PTNode<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token comment">//\u62F7\u8D1D\u5DE6\u5B50\u6811</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>lchild<span class="token punctuation">)</span><span class="token punctuation">{</span>
root<span class="token operator">-&gt;</span>lchild <span class="token operator">=</span> <span class="token function">CopyTree</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span><span class="token punctuation">{</span>
root<span class="token operator">-&gt;</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token comment">//\u62F7\u8D1D\u53F3\u5B50\u6811</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>rchild<span class="token punctuation">)</span><span class="token punctuation">{</span>
root<span class="token operator">-&gt;</span>rchild <span class="token operator">=</span> <span class="token function">CopyTree</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span><span class="token punctuation">{</span>
root<span class="token operator">-&gt;</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u521B\u5EFA\u65B0\u8282\u70B9</span>
PTNode<span class="token operator">*</span> newnode <span class="token operator">=</span> <span class="token punctuation">(</span>PTNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>PTNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
newnode<span class="token operator">-&gt;</span>ch <span class="token operator">=</span> root<span class="token operator">-&gt;</span>ch<span class="token punctuation">;</span>
newnode<span class="token operator">-&gt;</span>lchild <span class="token operator">=</span> root<span class="token operator">-&gt;</span>lchild<span class="token punctuation">;</span>
newnode<span class="token operator">-&gt;</span>rchild <span class="token operator">=</span> root<span class="token operator">-&gt;</span>rchild<span class="token punctuation">;</span>
<span class="token keyword">return</span> newnode<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u6D4B\u8BD5</span>
<span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment">//\u521B\u5EFA\u7ED3\u70B9</span>
PTNode node1<span class="token punctuation">,</span> node2<span class="token punctuation">,</span> node3<span class="token punctuation">,</span> node4<span class="token punctuation">,</span> node5<span class="token punctuation">,</span> node6<span class="token punctuation">,</span> node7<span class="token punctuation">,</span> node8<span class="token punctuation">;</span>
node1<span class="token punctuation">.</span>ch <span class="token operator">=</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">;</span> node1<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> node1<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
node2<span class="token punctuation">.</span>ch <span class="token operator">=</span> <span class="token char">&#39;B&#39;</span><span class="token punctuation">;</span> node2<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> node2<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
node3<span class="token punctuation">.</span>ch <span class="token operator">=</span> <span class="token char">&#39;C&#39;</span><span class="token punctuation">;</span> node3<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> node3<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
node4<span class="token punctuation">.</span>ch <span class="token operator">=</span> <span class="token char">&#39;D&#39;</span><span class="token punctuation">;</span> node4<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> node4<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
node5<span class="token punctuation">.</span>ch <span class="token operator">=</span> <span class="token char">&#39;E&#39;</span><span class="token punctuation">;</span> node5<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> node5<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
node6<span class="token punctuation">.</span>ch <span class="token operator">=</span> <span class="token char">&#39;F&#39;</span><span class="token punctuation">;</span> node6<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> node6<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
node7<span class="token punctuation">.</span>ch <span class="token operator">=</span> <span class="token char">&#39;G&#39;</span><span class="token punctuation">;</span> node7<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> node7<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
node8<span class="token punctuation">.</span>ch <span class="token operator">=</span> <span class="token char">&#39;H&#39;</span><span class="token punctuation">;</span> node8<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> node8<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token comment">//\u5EFA\u7ACB\u7ED3\u70B9\u5173\u7CFB</span>
node1<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token operator">&amp;</span>node2<span class="token punctuation">;</span>
node1<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token operator">&amp;</span>node6<span class="token punctuation">;</span>
node2<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
node2<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token operator">&amp;</span>node3<span class="token punctuation">;</span>
node3<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token operator">&amp;</span>node4<span class="token punctuation">;</span>
node3<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token operator">&amp;</span>node5<span class="token punctuation">;</span>
node6<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
node6<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token operator">&amp;</span>node7<span class="token punctuation">;</span>
node7<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token operator">&amp;</span>node8<span class="token punctuation">;</span>
node7<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\u6253\u5370\u62F7\u8D1D\u4E8C\u53C9\u6811:\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
PTNode<span class="token operator">*</span> root <span class="token operator">=</span> <span class="token function">CopyTree</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>node1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">RecursionBiTree</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//\u6253\u5370\u7ED3\u70B9</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br></div></div><h2 id="_7-5-\u4E8C\u53C9\u6811\u7684\u521B\u5EFA" tabindex="-1"><a class="header-anchor" href="#_7-5-\u4E8C\u53C9\u6811\u7684\u521B\u5EFA" aria-hidden="true">#</a> 7.5 \u4E8C\u53C9\u6811\u7684\u521B\u5EFA</h2><h3 id="_7-5-1-\u4E2D\u5E8F\u548C\u5148\u5E8F\u521B\u5EFA\u6811" tabindex="-1"><a class="header-anchor" href="#_7-5-1-\u4E2D\u5E8F\u548C\u5148\u5E8F\u521B\u5EFA\u6811" aria-hidden="true">#</a> 7.5.1 \u4E2D\u5E8F\u548C\u5148\u5E8F\u521B\u5EFA\u6811</h3><p>1\u3001\u6839\u636E\u4E2D\u5E8F\u904D\u5386\u7684\u7ED3\u679C\u80FD\u786E\u5B9A\u4E00\u68F5\u6811\u5417\uFF1F</p><p>\u4E2D\u5E8F\u904D\u5386\uFF1A\u7ED3\u679C\u4E3A\uFF1A\u201C12345\u201D\uFF0C\u8FD9\u4E2A\u201C12345\u201D\u80FD\u786E\u5B9A\u4E00\u68F5\u6811\u5417\uFF1F</p><p>\u8BF7\u601D\u8003\uFF0C\u4F1A\u6709\u591A\u5C11\u79CD\u5F62\u72B6\u3002<strong>\u6811\u7684\u5F62\u72B6\u80FD\u552F\u4E00\u786E\u5B9A\u5417\uFF1F\uFF1F\uFF1F</strong></p><p><img src="`+w+'" alt="image-20220329230757035"></p><p>2\u3001\u5982\u4F55\u624D\u80FD\u786E\u5B9A\u4E00\u68F5\u6811\uFF1F</p><p>\u7ED3\u8BBA\uFF1A <strong>\u901A\u8FC7\u4E2D\u5E8F\u904D\u5386\u548C\u5148\u5E8F\u904D\u5386\u53EF\u4EE5\u786E\u5B9A\u4E00\u4E2A\u6811</strong></p><p>\u901A\u8FC7\u4E2D\u5E8F\u904D\u5386\u548C\u540E\u7EED\u904D\u5386\u53EF\u4EE5\u786E\u5B9A\u4E00\u4E2A\u6811</p><p>\u901A\u8FC7\u5148\u5E8F\u904D\u5386\u548C\u540E\u5E8F\u904D\u5386\u786E\u5B9A\u4E0D\u4E86\u4E00\u4E2A\u6811\u3002</p><p><strong>\u5355\u72EC\u5148\u5E8F\u904D\u5386\uFF1A\u80FD\u6C42\u89E3\u6839\uFF0C\u4F46\u4E0D\u80FD\u6C42\u89E3\u5DE6\u5B50\u6811\u4EC0\u4E48\u65F6\u5019\u7ED3\u675F\u3001\u53F3\u5B50\u6811\u4EC0\u4E48\u65F6\u5019\u5F00\u59CB\u3002</strong></p><p>3\u3001\u6839\u636E\u5148\u5E8F\u548C\u4E2D\u5E8F\u7ED3\u679C\u753B\u6811</p><p>\u7B97\u6CD5</p><ul><li><p>\u901A\u8FC7\u5148\u5E8F\u904D\u5386\u627E\u5230\u6839\u7ED3\u70B9 A\uFF0C\u518D\u901A\u8FC7 A \u5728\u4E2D\u5E8F\u904D\u5386\u7684\u4F4D\u7F6E\u627E\u51FA\u5DE6\u5B50\u6811\uFF0C\u53F3\u5B50\u6811</p></li><li><p>\u5728 A \u7684\u5DE6\u5B50\u6811\u4E2D\uFF0C\u627E\u5DE6\u5B50\u6811\u7684\u6839\u7ED3\u70B9\uFF08\u5728\u5148\u5E8F\u4E2D\u627E\uFF09\uFF0C\u8F6C\u6B65\u9AA4 1</p></li><li><p>\u5728 A \u7684\u53F3\u5B50\u6811\u4E2D\uFF0C\u627E\u53F3\u5B50\u6811\u7684\u6839\u7ED3\u70B9\uFF08\u5728\u5148\u5E8F\u4E2D\u627E\uFF09\uFF0C\u8F6C\u6B65\u9AA4 1</p></li></ul><p>\u7EC3\u4E60 1</p><p>\u5148\u5E8F\u904D\u5386\u7ED3\u679C\uFF1AA D E B C F</p><p>\u4E2D\u5E8F\u904D\u5386\u7ED3\u679C\uFF1AD E A C F B</p><p><img src="'+f+'" alt="image-20220329230807920"></p><p>\u7EC3\u4E60 2</p><p>\u5148\u5E8F\u904D\u5386\u7ED3\u679C\uFF1AA B D H K E C F I G J</p><p>\u4E2D\u5E8F\u904D\u5386\u7ED3\u679C\uFF1AH K D B E A I F C G J</p><p><img src="'+L+'" alt="image-20220329230821184"></p><h3 id="_7-5-2-\u53F7\u6CD5\u521B\u5EFA\u6811" tabindex="-1"><a class="header-anchor" href="#_7-5-2-\u53F7\u6CD5\u521B\u5EFA\u6811" aria-hidden="true">#</a> 7.5.2 #\u53F7\u6CD5\u521B\u5EFA\u6811</h3><p>1\u3001\u4EC0\u4E48\u662F#\u53F7\u6CD5\u521B\u5EFA\u6811</p><p>#\u521B\u5EFA\u6811\uFF0C\u8BA9\u6811\u7684\u6BCF\u4E00\u4E2A\u8282\u70B9\u90FD\u53D8\u6210\u5EA6\u6570\u4E3A 2 \u7684\u6811</p><p>\u5148\u5E8F\u904D\u5386\u7ED3\u679C: 124###3##</p><p><img src="'+v+'" alt="image-20220329230831106"></p><p>\u5148\u5E8F\u904D\u5386\uFF1A124###3##\u53EF\u4EE5\u552F\u4E00\u786E\u5B9A\u4E00\u68F5\u6811\u5417\uFF0C\u4E3A\u4EC0\u4E48\uFF1F</p><p><img src="'+_+'" alt="image-20220329230838271"></p><p>\u786E\u5B9A\u51FA\u6765\u7684\u6811\u6A21\u578B: \u4E0A\u56FE\u5373\u662F\u3002</p><p>2 #\u521B\u5EFA\u6811\u7EC3\u4E60 ABDH#K###E##CFI###G#J##</p><p>\u5148\u5E8F\u904D\u5386\uFF1AABDH#K###E##CFI###G#J## , \u8BF7\u753B\u51FA\u6811\u7684\u5F62\u72B6\uFF1A</p><p><img src="'+N+`" alt="image-20220329230848072"></p><p>3\u3001#\u53F7\u6CD5\u7F16\u7A0B\u5B9E\u8DF5</p><p><strong>\u5229\u7528\u524D\u5E8F\u904D\u5386\u6765\u5EFA\u6811</strong>\uFF08\u7ED3\u70B9\u503C\u9646\u7EED\u4ECE\u952E\u76D8\u8F93\u5165\uFF0C\u7528 DLR \u4E3A\u5B9C\uFF09</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>Bintree <span class="token function">createBTpre</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> Bintree T<span class="token punctuation">;</span> <span class="token keyword">char</span> ch<span class="token punctuation">;</span>
<span class="token function">scanf</span><span class="token punctuation">(</span>\u201C<span class="token operator">%</span>c\u201D<span class="token punctuation">,</span><span class="token operator">&amp;</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span>\u2019#\u2019<span class="token punctuation">)</span> T<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token keyword">else</span>
<span class="token punctuation">{</span> T<span class="token operator">=</span><span class="token punctuation">(</span> Bintree <span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>BinTNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
T<span class="token operator">-&gt;</span>data<span class="token operator">=</span>ch<span class="token punctuation">;</span>
T<span class="token operator">-&gt;</span>lchild<span class="token operator">=</span><span class="token function">createBTpre</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
T<span class="token operator">-&gt;</span>rchild<span class="token operator">=</span><span class="token function">createBTpre</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">return</span> T<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><strong>\u4F7F\u7528\u540E\u5E8F\u904D\u5386\u7684\u65B9\u5F0F\u9500\u6BC1\u4E00\u68F5\u6811\uFF0C \u5148\u91CA\u653E\u53F6\u5B50\u8282\u70B9\uFF0C\u5728\u91CA\u653E\u6839\u8282\u70B9</strong></p><p><strong>//\u9500\u6BC1\u6811</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">BiTree_Free</span><span class="token punctuation">(</span>BiTNode<span class="token operator">*</span> T<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
BiTNode <span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>T<span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>rchild <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token function">BiTree_Free</span><span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>lchild <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token function">BiTree_Free</span><span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>T <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token function">free</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>
T <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h1 id="_8-\u6392\u5E8F" tabindex="-1"><a class="header-anchor" href="#_8-\u6392\u5E8F" aria-hidden="true">#</a> 8.\u6392\u5E8F</h1><h3 id="_8-1-\u6392\u5E8F\u7684\u57FA\u672C\u6982\u5FF5" tabindex="-1"><a class="header-anchor" href="#_8-1-\u6392\u5E8F\u7684\u57FA\u672C\u6982\u5FF5" aria-hidden="true">#</a> 8.1 \u6392\u5E8F\u7684\u57FA\u672C\u6982\u5FF5</h3><p>\u73B0\u5B9E\u751F\u6D3B\u4E2D\u6392\u5E8F\u5F88\u91CD\u8981\uFF0C\u4F8B\u5982\uFF1A\u6DD8\u5B9D\u6309\u6761\u4EF6\u641C\u7D22\u7684\u7ED3\u679C\u5C55\u793A\u7B49\u3002</p><ul><li>\u6982\u5FF5</li></ul><p>\u6392\u5E8F\u662F\u8BA1\u7B97\u673A\u5185\u7ECF\u5E38\u8FDB\u884C\u7684\u4E00\u79CD\u64CD\u4F5C\uFF0C\u5176\u76EE\u7684\u662F\u5C06\u4E00\u7EC4\u201C\u65E0\u5E8F\u201D\u7684\u6570\u636E\u5143\u7D20\u8C03\u6574\u4E3A\u201C\u6709\u5E8F\u201D\u7684\u6570\u636E\u5143\u7D20\u3002</p><ul><li>\u6392\u5E8F\u6570\u5B66\u5B9A\u4E49\uFF1A</li></ul><p>\u5047\u8BBE\u542Bn\u4E2A\u6570\u636E\u5143\u7D20\u7684\u5E8F\u5217\u4E3A{ R1, R2, \u2026, Rn}\uFF0C\u5176\u76F8\u5E94\u7684\u5173\u952E\u5B57\u5E8F\u5217\u4E3A{ K1, K2, \u2026, Kn}\u8FD9\u4E9B\u5173\u952E\u5B57\u76F8\u4E92\u4E4B\u95F4\u53EF\u4EE5\u8FDB\u884C\u6BD4\u8F83\uFF0C\u5373\u5728\u5B83\u4EEC\u4E4B\u95F4\u5B58\u5728\u7740\u8FD9\u6837\u4E00\u4E2A\u5173\u7CFB \uFF1A</p><p>Kp1\u2264Kp2\u2264\u2026\u2264Kpn</p><p>\u6309\u6B64\u56FA\u6709\u5173\u7CFB\u5C06\u4E0A\u5F0F\u8BB0\u5F55\u5E8F\u5217\u91CD\u65B0\u6392\u5217\u4E3A{ Rp1, Rp2, \u2026\uFF0CRpn}\u7684\u64CD\u4F5C\u79F0\u4F5C\u6392\u5E8F</p><ul><li>\u6392\u5E8F\u7684\u7A33\u5B9A\u6027</li></ul><p>\u5982\u679C\u5728\u5E8F\u5217\u4E2D\u6709\u4E24\u4E2A\u6570\u636E\u5143\u7D20r[i]\u548Cr[j]\uFF0C\u5B83\u4EEC\u7684\u5173\u952E\u5B57k[i] == k [j]\uFF0C\u4E14\u5728\u6392\u5E8F\u4E4B\u524D\uFF0C\u5BF9\u8C61r[i]\u6392\u5728r[j]\u524D\u9762\u3002\u5982\u679C\u5728\u6392\u5E8F\u4E4B\u540E\uFF0C\u5BF9\u8C61r[i]\u4ECD\u5728r[j]\u524D\u9762\uFF0C\u5219\u79F0\u8FD9\u4E2A\u6392\u5E8F\u65B9\u6CD5\u662F\u7A33\u5B9A\u7684\uFF0C\u5426\u5219\u79F0\u8FD9\u4E2A\u6392\u5E8F\u65B9\u6CD5\u662F\u4E0D\u7A33\u5B9A\u7684\u3002</p><p><img src="`+T+'" alt="image-20220329230907487"></p><ul><li>\u591A\u5173\u952E\u5B57\u6392\u5E8F</li></ul><p>\u6392\u5E8F\u65F6\u9700\u8981\u6BD4\u8F83\u7684\u5173\u952E\u5B57\u591A\u4F59\u4E00\u4E2A\uFF0C\u6392\u5E8F\u7ED3\u679C\u9996\u5148\u6309\u5173\u952E\u5B571\u8FDB\u884C\u6392\u5E8F\uFF0C\u5F53\u5173\u952E\u5B571\u76F8\u540C\u65F6\u6309\u5173\u952E\u5B572\u8FDB\u884C\u6392\u5E8F\uFF0C\u5F53\u5173\u952E\u5B57n-1\u76F8\u540C\u65F6\u6309\u5173\u952E\u5B57n\u8FDB\u884C\u6392\u5E8F\uFF0C\u5BF9\u4E8E\u591A\u5173\u952E\u5B57\u6392\u5E8F\uFF0C\u53EA\u9700\u8981\u5728\u6BD4\u8F83\u64CD\u4F5C\u65F6\u540C\u65F6\u8003\u8651\u591A\u4E2A\u5173\u952E\u5B57\u5373\u53EF\uFF01</p><ul><li><p>\u6392\u5E8F\u4E2D\u7684\u5173\u952E\u64CD\u4F5C</p></li><li><p>\u6BD4\u8F83\uFF1A\u4EFB\u610F\u4E24\u4E2A\u6570\u636E\u5143\u7D20\u901A\u8FC7\u6BD4\u8F83\u64CD\u4F5C\u786E\u5B9A\u5148\u540E\u6B21\u5E8F\u3002</p></li><li><p>\u4EA4\u6362\uFF1A\u6570\u636E\u5143\u7D20\u4E4B\u95F4\u9700\u8981\u4EA4\u6362\u624D\u80FD\u5F97\u5230\u9884\u671F\u7ED3\u679C\u3002</p></li><li><p>\u5185\u6392\u5E8F\u548C\u5916\u6392\u5E8F</p></li><li><p>\u5185\u6392\u5E8F\uFF1A\u5728\u6392\u5E8F\u8FC7\u7A0B\u4E2D\uFF0C\u5F85\u6392\u5E8F\u7684\u6240\u6709\u8BB0\u5F55\u5168\u90E8\u90FD\u653E\u7F6E\u5728\u5185\u5B58\u4E2D\uFF0C\u6392\u5E8F\u5206\u4E3A\uFF1A\u5185\u6392\u5E8F\u548C\u5916\u6392\u5E8F\u3002</p></li><li><p>\u5916\u6392\u5E8F\uFF1A\u7531\u4E8E\u6392\u5E8F\u7684\u8BB0\u5F55\u4E2A\u6570\u592A\u591A\uFF0C\u4E0D\u80FD\u540C\u65F6\u653E\u7F6E\u5728\u5185\u5B58\uFF0C\u6574\u4E2A\u6392\u5E8F\u8FC7\u7A0B\u9700\u8981\u5728\u5185\u5916\u5B58\u4E4B\u95F4\u591A\u6B21\u4EA4\u6362\u6570\u636E\u624D\u80FD\u8FDB\u884C\u3002</p></li><li><p>\u6392\u5E8F\u7684\u5BA1\u5224</p></li><li><p>\u65F6\u95F4\u6027\u80FD\uFF1A\u5173\u952E\u6027\u80FD\u5DEE\u5F02\u4F53\u73B0\u5728\u6BD4\u8F83\u548C\u4EA4\u6362\u7684\u6570\u91CF</p></li><li><p>\u8F85\u52A9\u5B58\u50A8\u7A7A\u95F4\uFF1A\u4E3A\u5B8C\u6210\u6392\u5E8F\u64CD\u4F5C\u9700\u8981\u7684\u989D\u5916\u7684\u5B58\u50A8\u7A7A\u95F4\uFF0C\u5FC5\u8981\u65F6\u53EF\u4EE5\u201C\u7A7A\u95F4\u6362\u65F6\u95F4\u201D</p></li><li><p>\u7B97\u6CD5\u7684\u5B9E\u73B0\u590D\u6742\u6027\uFF1A\u8FC7\u4E8E\u590D\u6742\u7684\u6392\u5E8F\u6CD5\u4F1A\u5F71\u54CD\u4EE3\u7801\u7684\u53EF\u8BFB\u6027\u548C\u53EF\u7EF4\u62A4\u6027\uFF0C\u4E5F\u53EF\u80FD\u5F71\u54CD\u6392\u5E8F\u7684\u6027\u80FD</p></li><li><p>\u603B\u7ED3</p></li><li><p>\u6392\u5E8F\u662F\u6570\u636E\u5143\u7D20\u4ECE\u65E0\u5E8F\u5230\u6709\u5E8F\u7684\u8FC7\u7A0B</p></li><li><p>\u6392\u5E8F\u5177\u6709\u7A33\u5B9A\u6027\uFF0C\u662F\u9009\u62E9\u6392\u5E8F\u7B97\u6CD5\u7684\u56E0\u7D20\u4E4B\u4E00</p></li><li><p>\u6BD4\u8F83\u548C\u4EA4\u6362\u662F\u6392\u5E8F\u7684\u57FA\u672C\u64CD\u4F5C</p></li><li><p>\u591A\u5173\u952E\u5B57\u6392\u5E8F\u4E0E\u5355\u5173\u952E\u5B57\u6392\u5E8F\u65E0\u672C\u8D28\u533A\u522B</p></li><li><p>\u6392\u5E8F\u7684\u65F6\u95F4\u6027\u80FD\u662F\u533A\u5206\u6392\u5E8F\u7B97\u6CD5\u597D\u574F\u7684\u4E3B\u8981\u56E0\u7D20</p></li></ul><h2 id="_8-2-\u5192\u6CE1\u6392\u5E8F" tabindex="-1"><a class="header-anchor" href="#_8-2-\u5192\u6CE1\u6392\u5E8F" aria-hidden="true">#</a> 8.2 \u5192\u6CE1\u6392\u5E8F</h2><p><img src="'+q+`" alt="image-20220329230917580"></p><h3 id="_8-2-1\u5192\u6CE1\u6392\u5E8F\u5B9E\u73B0\u6848\u4F8B" tabindex="-1"><a class="header-anchor" href="#_8-2-1\u5192\u6CE1\u6392\u5E8F\u5B9E\u73B0\u6848\u4F8B" aria-hidden="true">#</a> 8.2.1\u5192\u6CE1\u6392\u5E8F\u5B9E\u73B0\u6848\u4F8B</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h&gt;</span></span>
<span class="token comment">//\u6253\u5370\u6570\u7EC4</span>
<span class="token keyword">void</span> <span class="token function">PrintArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u4EA4\u6362\u51FD\u6570</span>
<span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> pos1<span class="token punctuation">,</span><span class="token keyword">int</span> pos2<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>pos1<span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">[</span>pos1<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>pos2<span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">[</span>pos2<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u5192\u6CE1\u6392\u5E8F</span>
<span class="token keyword">void</span> <span class="token function">BubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&gt;</span> i<span class="token punctuation">;</span>j <span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">77</span><span class="token punctuation">,</span><span class="token number">67</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//\u6253\u5370\u6392\u5E8F\u524D\u7684\u6570\u7EC4</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\u6253\u5370\u5192\u6CE1\u6392\u5E8F\u524D\u7684\u6570\u7EC4:\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">PrintArray</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//\u5BF9\u6570\u7EC4\u8FDB\u884C\u5192\u6CE1\u6392\u5E8F</span>
<span class="token function">BubbleSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\u6253\u5370\u5192\u6CE1\u6392\u5E8F\u540E\u7684\u6570\u7EC4:\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">PrintArray</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><h3 id="_8-2-2-\u5192\u6CE1\u6392\u5E8F-\u6539\u8FDB\u7248-\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#_8-2-2-\u5192\u6CE1\u6392\u5E8F-\u6539\u8FDB\u7248-\u5B9E\u73B0" aria-hidden="true">#</a> 8.2.2 \u5192\u6CE1\u6392\u5E8F\uFF08\u6539\u8FDB\u7248\uFF09\u5B9E\u73B0</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BUBBLE_TRUE</span> <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BUBBLE_FALSE</span> <span class="token expression"><span class="token number">0</span></span></span>
<span class="token comment">//\u6253\u5370\u6570\u7EC4</span>
<span class="token keyword">void</span> <span class="token function">PrintArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u4EA4\u6362\u51FD\u6570</span>
<span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> pos1<span class="token punctuation">,</span><span class="token keyword">int</span> pos2<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>pos1<span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">[</span>pos1<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>pos2<span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">[</span>pos2<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u5192\u6CE1\u6392\u5E8F</span>
<span class="token keyword">void</span> <span class="token function">BubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>
<span class="token keyword">int</span> flag <span class="token operator">=</span> BUBBLE_TRUE<span class="token punctuation">;</span> <span class="token comment">//\u662F\u5426\u6392\u5E8F\u5B8C\u6210 BUBBLE_TRUE \u8868\u793A\u6CA1\u6709\u6392\u5E8F\u5B8C\u6210\uFF0CBUBBLE_FALSE \u8868</span>
\u793A\u6392\u5E8F\u5B8C\u6210
<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length <span class="token operator">&amp;&amp;</span> flag <span class="token operator">==</span> BUBBLE_TRUE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
flag <span class="token operator">=</span> BUBBLE_FALSE<span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&gt;</span> i<span class="token punctuation">;</span>j <span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
flag <span class="token operator">=</span> BUBBLE_TRUE<span class="token punctuation">;</span>
<span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">77</span><span class="token punctuation">,</span><span class="token number">67</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//\u6253\u5370\u6392\u5E8F\u524D\u7684\u6570\u7EC4</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\u6253\u5370\u5192\u6CE1\u6392\u5E8F\u524D\u7684\u6570\u7EC4:\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">PrintArray</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//\u5BF9\u6570\u7EC4\u8FDB\u884C\u5192\u6CE1\u6392\u5E8F</span>
<span class="token function">BubbleSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\u6253\u5370\u5192\u6CE1\u6392\u5E8F\u540E\u7684\u6570\u7EC4:\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">PrintArray</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div><h3 id="_8-2-3-\u5192\u6CE1\u6392\u5E8F\u603B\u7ED3" tabindex="-1"><a class="header-anchor" href="#_8-2-3-\u5192\u6CE1\u6392\u5E8F\u603B\u7ED3" aria-hidden="true">#</a> 8.2.3 \u5192\u6CE1\u6392\u5E8F\u603B\u7ED3</h3><p>\u5192\u6CE1\u603B\u7ED3\uFF1A</p><ul><li>\u5192\u6CE1\u6392\u5E8F\u662F\u4E00\u79CD\u6548\u7387\u4F4E\u4E0B\u7684\u6392\u5E8F\u65B9\u6CD5\uFF0C\u5728\u6570\u636E\u89C4\u6A21\u5F88\u5C0F\u65F6\uFF0C\u53EF\u4EE5\u91C7\u7528\u3002\u6570\u636E\u89C4\u6A21\u6BD4</li></ul><p>\u8F83\u5927\u65F6\uFF0C\u6700\u597D\u7528\u5176\u5B83\u6392\u5E8F\u65B9\u6CD5\u3002</p><ul><li>\u4E0A\u8FF0\u4F8B\u5B50\u603B\u5BF9\u5192\u6CE1\u505A\u4E86\u4F18\u5316\uFF0C\u6DFB\u52A0\u4E86 flag \u4F5C\u4E3A\u6807\u8BB0\uFF0C\u8BB0\u5F55\u5E8F\u5217\u662F\u5426\u5DF2\u7ECF\u6709\u5E8F\uFF0C\u51CF</li></ul><p>\u5C11\u5FAA\u73AF\u6B21\u6570\u3002</p><ul><li><p>\u7A33\u5B9A\u6027</p></li><li><p><strong>\u5192\u6CE1\u6392\u5E8F\u662F\u4E00\u79CD\u7A33\u5B9A\u7684\u6392\u5E8F\u7B97\u6CD5</strong></p></li><li><p><strong>\u5192\u6CE1\u6392\u5E8F\u7684\u6548\u7387\uFF1AO\uFF08n\xB2\uFF09</strong></p></li></ul><h2 id="_8-3-\u9009\u62E9\u6392\u5E8F" tabindex="-1"><a class="header-anchor" href="#_8-3-\u9009\u62E9\u6392\u5E8F" aria-hidden="true">#</a> 8.3 \u9009\u62E9\u6392\u5E8F</h2><p><img src="`+S+`" alt="image-20220329230940547"></p><h3 id="_8-3-1-\u9009\u62E9\u6392\u5E8F\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#_8-3-1-\u9009\u62E9\u6392\u5E8F\u5B9E\u73B0" aria-hidden="true">#</a> 8.3.1 \u9009\u62E9\u6392\u5E8F\u5B9E\u73B0</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h&gt;</span></span>
<span class="token comment">//\u6253\u5370\u6570\u7EC4</span>
<span class="token keyword">void</span> <span class="token function">PrintArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u4EA4\u6362\u51FD\u6570</span>
<span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> pos1<span class="token punctuation">,</span> <span class="token keyword">int</span> pos2<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>pos1<span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">[</span>pos1<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>pos2<span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">[</span>pos2<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u9009\u62E9\u6392\u5E8F</span>
<span class="token keyword">void</span> <span class="token function">SelectSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>
<span class="token keyword">int</span> min<span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
min <span class="token operator">=</span> i<span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
min <span class="token operator">=</span> j<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> min<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>min<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">67</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//\u6253\u5370\u9009\u62E9\u6392\u5E8F\u524D\u7684\u6570\u7EC4</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\u6253\u5370\u9009\u62E9\u6392\u5E8F\u524D\u7684\u6570\u7EC4:\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">PrintArray</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//\u5BF9\u6570\u7EC4\u8FDB\u884C\u9009\u62E9\u6392\u5E8F</span>
<span class="token function">SelectSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//\u6253\u5370\u9009\u62E9\u6392\u5E8F\u524D\u7684\u6570\u7EC4</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\u6253\u5370\u9009\u62E9\u6392\u5E8F\u540E\u7684\u6570\u7EC4:\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">PrintArray</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div><h3 id="_8-3-2-\u9009\u62E9\u6392\u5E8F\u603B\u7ED3" tabindex="-1"><a class="header-anchor" href="#_8-3-2-\u9009\u62E9\u6392\u5E8F\u603B\u7ED3" aria-hidden="true">#</a> 8.3.2 \u9009\u62E9\u6392\u5E8F\u603B\u7ED3</h3><ul><li>\u7A33\u5B9A\u6027 <ul><li><strong>\u9009\u62E9\u6392\u5E8F\u662F\u4E0D\u7A33\u5B9A\u7684\u6392\u5E8F\u65B9\u6CD5</strong></li><li><strong>\u9009\u62E9\u6392\u5E8F\u6548\u7387\uFF1AO(n<sup>2</sup>)</strong></li></ul></li></ul><h2 id="_8-4-\u63D2\u5165\u6392\u5E8F" tabindex="-1"><a class="header-anchor" href="#_8-4-\u63D2\u5165\u6392\u5E8F" aria-hidden="true">#</a> 8.4 \u63D2\u5165\u6392\u5E8F</h2><p><img src="`+U+`" alt="image-20220329230953221"></p><h3 id="_8-4-1-\u63D2\u5165\u6392\u5E8F\u5B9E\u73B0\u6848\u4F8B" tabindex="-1"><a class="header-anchor" href="#_8-4-1-\u63D2\u5165\u6392\u5E8F\u5B9E\u73B0\u6848\u4F8B" aria-hidden="true">#</a> 8.4.1 \u63D2\u5165\u6392\u5E8F\u5B9E\u73B0\u6848\u4F8B</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h&gt;</span></span>
<span class="token comment">//\u6253\u5370\u6570\u7EC4</span>
<span class="token keyword">void</span> <span class="token function">PrintArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u63D2\u5165\u6392\u5E8F</span>
<span class="token keyword">void</span> <span class="token function">InsertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> temp<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">67</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//\u6253\u5370\u63D2\u5165\u6392\u5E8F\u524D\u7684\u6570\u7EC4</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\u6253\u5370\u63D2\u5165\u6392\u5E8F\u524D\u7684\u6570\u7EC4:\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">PrintArray</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//\u5BF9\u6570\u7EC4\u8FDB\u884C\u63D2\u5165\u6392\u5E8F</span>
<span class="token function">InsertSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\u6253\u5370\u63D2\u5165\u6392\u5E8F\u540E\u7684\u6570\u7EC4:\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">PrintArray</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><h3 id="_8-4-2-\u63D2\u5165\u6392\u5E8F\u603B\u7ED3" tabindex="-1"><a class="header-anchor" href="#_8-4-2-\u63D2\u5165\u6392\u5E8F\u603B\u7ED3" aria-hidden="true">#</a> 8.4.2 \u63D2\u5165\u6392\u5E8F\u603B\u7ED3</h3><ul><li>\u7A33\u5B9A\u6027 <ul><li><strong>\u63D2\u5165\u6392\u5E8F\u662F\u7A33\u5B9A\u7684\u6392\u5E8F\u7B97\u6CD5</strong></li><li><strong>\u63D2\u5165\u6392\u5E8F\u6548\u7387\uFF1AO\uFF08n\xB2\uFF09</strong></li></ul></li></ul><h2 id="_8-5\u5E0C\u5C14\u6392\u5E8F" tabindex="-1"><a class="header-anchor" href="#_8-5\u5E0C\u5C14\u6392\u5E8F" aria-hidden="true">#</a> 8.5\u5E0C\u5C14\u6392\u5E8F</h2><p>\u7B97\u6CD5\u4ECB\u7ECD</p><p><strong>\u5E0C\u5C14\u6392\u5E8F\u7684\u5B9E\u8D28\u5C31\u662F\u5206\u7EC4\u63D2\u5165\u6392\u5E8F</strong>\uFF0C\u8BE5\u65B9\u6CD5\u53C8\u79F0\u7F29\u5C0F\u589E\u91CF\u6392\u5E8F\uFF0C\u56E0 DL\uFF0EShell \u4E8E</p><p>1959 \u5E74\u63D0\u51FA\u800C\u5F97\u540D\u3002</p><ul><li>\u57FA\u672C\u601D\u60F3</li></ul><p>\u5148\u5C06\u6574\u4E2A\u5F85\u6392\u5143\u7D20\u5E8F\u5217\u5206\u5272\u6210\u82E5\u5E72\u4E2A\u5B50\u5E8F\u5217\uFF08\u7531\u76F8\u9694\u67D0\u4E2A\u201C\u589E\u91CF\u201D\u7684\u5143\u7D20\u7EC4\u6210\u7684\uFF09\u5206\u522B\u8FDB\u884C\u76F4\u63A5\u63D2\u5165\u6392\u5E8F\uFF0C\u7136\u540E\u4F9D\u6B21\u7F29\u51CF\u589E\u91CF\u518D\u8FDB\u884C\u6392\u5E8F\uFF0C\u5F85\u6574\u4E2A\u5E8F\u5217\u4E2D\u7684\u5143\u7D20\u57FA\u672C\u6709\u5E8F\uFF08\u589E\u91CF\u8DB3\u591F\u5C0F\uFF09\u65F6\uFF0C\u518D\u5BF9\u5168\u4F53\u5143\u7D20\u8FDB\u884C\u4E00\u6B21\u76F4\u63A5\u63D2\u5165\u6392\u5E8F\u3002\u56E0\u4E3A\u76F4\u63A5\u63D2\u5165\u6392\u5E8F\u5728\u5143\u7D20\u57FA\u672C\u6709\u5E8F\u7684\u60C5\u51B5\u4E0B\uFF08\u63A5\u8FD1\u6700\u597D\u60C5\u51B5\uFF09\uFF0C\u6548\u7387\u662F\u5F88\u9AD8\u7684\uFF0C\u56E0\u6B64\u5E0C\u5C14\u6392\u5E8F\u5728\u65F6\u95F4\u6548\u7387\u4E0A\u6BD4\u524D\u4E09\u79CD\u65B9\u6CD5\u6709\u8F83\u5927\u63D0\u9AD8\u3002</p><h3 id="_8-5-1-\u5E0C\u5C14\u6392\u5E8F\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#_8-5-1-\u5E0C\u5C14\u6392\u5E8F\u5B9E\u73B0" aria-hidden="true">#</a> 8.5.1 \u5E0C\u5C14\u6392\u5E8F\u5B9E\u73B0</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h&gt;</span></span>
<span class="token comment">//\u6253\u5370\u6570\u7EC4</span>
<span class="token keyword">void</span> <span class="token function">PrintArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u5E0C\u5C14\u6392\u5E8F</span>
<span class="token keyword">void</span> <span class="token function">ShellSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>
<span class="token keyword">int</span> increament <span class="token operator">=</span> length<span class="token punctuation">;</span> <span class="token comment">//\u521D\u59CB\u589E\u91CF</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>increament <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
increament <span class="token operator">=</span> increament <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">//\u5206\u7EC4</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> increament<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment">//\u904D\u5386\u6BCF\u4E00\u4E2A\u5206\u7EC4\uFF0C\u5E76\u5BF9\u6BCF\u4E00\u7EC4\u7684\u5143\u7D20\u8FDB\u884C\u63D2\u5165\u6392\u5E8F</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">+</span> increament<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> j<span class="token operator">+=</span>increament<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token operator">-</span>increament<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> j <span class="token operator">-</span> increament<span class="token punctuation">;</span> k <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> temp <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span> k <span class="token operator">-=</span> increament<span class="token punctuation">)</span><span class="token punctuation">{</span>
arr<span class="token punctuation">[</span>k <span class="token operator">+</span> increament<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
arr<span class="token punctuation">[</span>k <span class="token operator">+</span> increament<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">67</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//\u6253\u5370\u5E0C\u5C14\u6392\u5E8F\u524D\u7684\u6570\u7EC4</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\u6253\u5370\u5E0C\u5C14\u6392\u5E8F\u524D\u7684\u6570\u7EC4:\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">PrintArray</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//\u5BF9\u6570\u7EC4\u8FDB\u884C\u5E0C\u5C14\u6392\u5E8F</span>
<span class="token function">ShellSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\u6253\u5370\u5E0C\u5C14\u6392\u5E8F\u540E\u7684\u6570\u7EC4:\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">PrintArray</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><p>\u901A\u8FC7\u8FD9\u6BB5\u4EE3\u7801\uFF0C\u5927\u5BB6\u5E94\u8BE5\u80FD\u591F\u770B\u5230\u5728\u5E0C\u5C14\u6392\u5E8F\u4E2D\u6211\u4EEC\u5E76\u4E0D\u662F\u968F\u4FBF\u7684\u628A\u5E8F\u5217\u5206\u7EC4\uFF0C\u7136\u540E\u5BF9</p><p>\u6BCF\u4E2A\u5B50\u5E8F\u5217\u5206\u522B\u6392\u5E8F\uFF0C\u800C\u662F\u5C06\u76F8\u9694\u201C\u589E\u91CF\u201D\u7684\u8BB0\u5F55\u7EC4\u6210\u4E00\u4E2A\u5B50\u5E8F\u5217\uFF0C\u5B9E\u73B0\u8DF3\u8DC3\u5F0F\u79FB\u52A8\uFF0C\u4F7F\u5F97</p><p>\u6392\u5E8F\u6548\u7387\u63D0\u9AD8\u3002</p><p>\u8FD9\u4E2A\u589E\u91CF\u7684\u9009\u53D6\u5C31\u975E\u5E38\u5173\u952E\u4E86\u3002\u6211\u4EEC\u6848\u4F8B\u4E2D\u662F\u7528 Increasement = increasement / 3 +</p><p>1,\u81F3\u4E8E\u8FD9\u4E2A\u589E\u91CF\u5982\u4F55\u9009\u53D6\u975E\u5E38\u96BE\uFF0C\u6CA1\u6709\u660E\u786E\u7684\u786E\u5B9A\uFF0C\u4F46\u662F\u901A\u8FC7\u524D\u4EBA\u7684\u7814\u7A76\uFF0C\u6211\u4EEC\u7528</p><p><strong>\u6B65\u957F = \u6B65\u957F / 3 + 1</strong>\u3002</p><h2 id="_8-6\u5FEB\u901F\u6392\u5E8F" tabindex="-1"><a class="header-anchor" href="#_8-6\u5FEB\u901F\u6392\u5E8F" aria-hidden="true">#</a> 8.6\u5FEB\u901F\u6392\u5E8F</h2><p>\u7B97\u6CD5\u4ECB\u7ECD</p><p>\u5FEB\u901F\u6392\u5E8F\u662F C.R.A.Hoare \u4E8E 1962 \u5E74\u63D0\u51FA\u7684<strong>\u4E00\u79CD\u5212\u5206\u4EA4\u6362\u6392\u5E8F</strong>\u3002\u5B83<strong>\u91C7\u7528\u4E86\u4E00\u79CD\u5206\u6CBB\u7684\u7B56</strong></p><p><strong>\u7565</strong>\uFF0C\u901A\u5E38\u79F0\u5176\u4E3A\u5206\u6CBB\u6CD5(Divide-and-ConquerMethod)\u3002</p><ul><li><p>\u5206\u6CBB\u6CD5\u57FA\u672C\u601D\u60F3</p></li><li><p>\u5148\u4ECE\u6570\u5217\u4E2D\u53D6\u51FA\u4E00\u4E2A\u6570\u4F5C\u4E3A\u57FA\u51C6\u6570\uFF08\u67A2\u8F74\uFF09\u3002</p></li><li><p><strong>\u5206\u533A\u8FC7\u7A0B\u5C06\u6BD4\u8FD9\u4E2A\u6570\u5927\u7684\u6570\u5168\u653E\u5230\u5B83\u7684\u53F3\u8FB9\uFF0C\u5C0F\u4E8E\u6216\u7B49\u4E8E\u5B83\u7684\u6570\u5168\u653E\u5230\u5B83\u7684\u5DE6\u8FB9\u3002 (\u5347\u5E8F)</strong></p></li><li><p>\u518D\u5BF9\u5DE6\u53F3\u533A\u95F4\u91CD\u590D\u7B2C\u4E8C\u6B65\uFF0C\u76F4\u5230\u5404\u533A\u95F4\u53EA\u6709\u4E00\u4E2A\u6570\u3002</p></li></ul><p><img src="`+C+`" alt="image-20220329231019365"></p><h3 id="_8-6-1-\u5FEB\u901F\u6392\u5E8F\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#_8-6-1-\u5FEB\u901F\u6392\u5E8F\u5B9E\u73B0" aria-hidden="true">#</a> 8.6.1 \u5FEB\u901F\u6392\u5E8F\u5B9E\u73B0</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h&gt;</span></span>
<span class="token comment">//\u6253\u5370\u6570\u7EC4</span>
<span class="token keyword">void</span> <span class="token function">PrintArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u5FEB\u901F\u6392\u5E8F</span>
<span class="token keyword">void</span> <span class="token function">QuickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> low<span class="token punctuation">,</span><span class="token keyword">int</span> height<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">int</span> left <span class="token operator">=</span> low<span class="token punctuation">;</span>
<span class="token keyword">int</span> right <span class="token operator">=</span> height<span class="token punctuation">;</span>
<span class="token comment">//\u53D6\u51FA\u57FA\u51C6\u6570</span>
<span class="token keyword">int</span> target <span class="token operator">=</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment">//\u56E0\u4E3A\u5728\u5DE6\u8FB9\u6316\u5751\uFF0C\u4ECE\u53F3\u9762\u5F00\u59CB \u627E\u6BD4\u57FA\u51C6\u6570\u5C0F\u7684</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>
right<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>
arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
left<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u4ECE\u5DE6\u5411\u53F3\u627E\u6BD4\u57FA\u51C6\u6570\u5927\u7684</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>
left<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>
arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
right<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token comment">//\u8FD9\u4E2A\u65F6\u5019 left \u548C right \u540C\u65F6\u6307\u5411\u7684\u4F4D\u7F6E\uFF0C\u5C06\u57FA\u51C6\u6570\u63D2\u5165\u8FD9\u4E2A\u4F4D\u7F6E</span>
arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> target<span class="token punctuation">;</span>
<span class="token function">QuickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">QuickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">67</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//\u6253\u5370\u5FEB\u901F\u6392\u5E8F\u524D\u7684\u6570\u7EC4</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\u6253\u5370\u5FEB\u901F\u6392\u5E8F\u524D\u7684\u6570\u7EC4:\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">PrintArray</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//\u5BF9\u6570\u7EC4\u8FDB\u884C\u5FEB\u901F\u6392\u5E8F</span>
<span class="token function">QuickSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\u6253\u5370\u5FEB\u901F\u6392\u5E8F\u540E\u7684\u6570\u7EC4:\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">PrintArray</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br></div></div><h2 id="_8-7-\u5F52\u5E76\u6392\u5E8F" tabindex="-1"><a class="header-anchor" href="#_8-7-\u5F52\u5E76\u6392\u5E8F" aria-hidden="true">#</a> 8.7 \u5F52\u5E76\u6392\u5E8F</h2><p>\u7B97\u6CD5\u4ECB\u7ECD</p><p>\u5F52\u5E76\u6392\u5E8F\u662F\u5EFA\u7ACB\u5728\u5F52\u5E76\u64CD\u4F5C\u4E0A\u7684\u4E00\u79CD\u6709\u6548\u7684\u6392\u5E8F\u7B97\u6CD5\u3002\u8BE5\u7B97\u6CD5\u662F\u91C7\u7528\u5206\u6CBB\u6CD5\uFF08Divide</p><p>and Conquer\uFF09\u7684\u4E00\u4E2A\u975E\u5E38\u5178\u578B\u7684\u5E94\u7528\u3002</p><ul><li>\u57FA\u672C\u601D\u60F3</li></ul><p><strong>\u57FA\u672C\u601D\u8DEF\u5C31\u662F\u5C06\u6570\u7EC4\u5206\u6210\u4E8C\u7EC4 A\uFF0CB\uFF0C\u5982\u679C\u8FD9\u4E8C\u7EC4\u7EC4\u5185\u7684\u6570\u636E\u90FD\u662F\u6709\u5E8F\u7684\uFF0C\u90A3\u4E48\u5C31\u53EF\u4EE5</strong></p><p><strong>\u5F88\u65B9\u4FBF\u7684\u5C06\u8FD9\u4E8C\u7EC4\u6570\u636E\u8FDB\u884C\u6392\u5E8F</strong>\u3002\u5982\u4F55\u8BA9\u8FD9\u4E8C\u7EC4\u7EC4\u5185\u6570\u636E\u6709\u5E8F\u4E86\uFF1F</p><p><strong>\u53EF\u4EE5\u5C06 A\uFF0CB \u7EC4\u5404\u81EA\u518D\u5206\u6210\u4E8C\u7EC4\u3002\u4F9D\u6B21\u7C7B\u63A8\uFF0C\u5F53\u5206\u51FA\u6765\u7684\u5C0F\u7EC4\u53EA\u6709\u4E00\u4E2A\u6570\u636E\u65F6\uFF0C\u53EF\u4EE5\u8BA4\u4E3A\u8FD9\u4E2A\u5C0F\u7EC4\u7EC4\u5185\u5DF2\u7ECF\u8FBE\u5230\u4E86\u6709\u5E8F\uFF0C\u7136\u540E\u518D\u5408\u5E76\u76F8\u90BB\u7684\u4E8C\u4E2A\u5C0F\u7EC4\u5C31\u53EF\u4EE5\u4E86\u3002\u8FD9\u6837\u901A\u8FC7\u5148\u9012\u5F52\u7684\u5206\u89E3\u6570\u5217\uFF0C\u518D\u5408\u5E76\u6570\u5217\u5C31\u5B8C\u6210\u4E86\u5F52\u5E76\u6392\u5E8F</strong></p><ul><li><strong>\u5F52\u5E76\u7684\u5B9A\u4E49</strong></li></ul><p><img src="`+E+'" alt="image-20220329231037829"></p><p><img src="'+P+`" alt="image-20220329231050572"></p><ul><li><strong>\u5982\u4F55\u5408\u5E76\u8FDE\u4E2A\u6709\u5E8F\u5E8F\u5217\uFF1F\uFF1F\uFF1F</strong></li></ul><p>\u53EA\u8981\u4ECE\u6BD4\u8F83\u4E8C\u4E2A\u6570\u5217\u7684\u7B2C\u4E00\u4E2A\u6570\uFF0C\u8C01\u5C0F\u5C31\u5148\u53D6\u8C01\uFF0C\u53D6\u4E86\u540E\u5C31\u5728\u5BF9\u5E94\u6570\u5217\u4E2D\u5220\u9664\u8FD9\u4E2A</p><p>\u6570\u3002\u7136\u540E\u518D\u8FDB\u884C\u6BD4\u8F83\uFF0C\u5982\u679C\u6709\u6570\u5217\u4E3A\u7A7A\uFF0C\u90A3\u76F4\u63A5\u5C06\u53E6\u4E00\u4E2A\u6570\u5217\u7684\u6570\u636E\u4F9D\u6B21\u53D6\u51FA\u5373\u53EF\u3002</p><h3 id="_8-6-1-\u5F52\u5E76\u6392\u5E8F\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#_8-6-1-\u5F52\u5E76\u6392\u5E8F\u5B9E\u73B0" aria-hidden="true">#</a> 8.6.1 \u5F52\u5E76\u6392\u5E8F\u5B9E\u73B0</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h&gt;</span></span>
<span class="token comment">//\u6253\u5370\u6570\u7EC4</span>
<span class="token keyword">void</span> <span class="token function">PrintArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">Merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> first<span class="token punctuation">,</span><span class="token keyword">int</span> last<span class="token punctuation">,</span><span class="token keyword">int</span> mid<span class="token punctuation">,</span><span class="token keyword">int</span> temp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">int</span> i <span class="token operator">=</span> first<span class="token punctuation">;</span> <span class="token comment">//\u7B2C\u4E00\u4E2A\u6709\u5E8F\u5E8F\u5217\u5F00\u59CB\u7684\u4E0B\u6807</span>
<span class="token keyword">int</span> j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//\u7B2C\u4E8C\u4E2A\u6709\u5E8F\u5E8F\u5217\u5F00\u59CB\u7684\u4E0B\u6807</span>
<span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment">//\u5F00\u59CB\u5408\u5E76\u4E24\u4E2A\u6709\u5E8F\u5E8F\u5217</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> last<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment">//\u627E\u5F53\u524D\u4E24\u4E2A\u6570\u4E2D\u6700\u5C0F\u7684\u6570</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment">//\u5C06\u6700\u5C0F\u6570\u653E\u5230 temp \u4E2D</span>
temp<span class="token punctuation">[</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
i<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span><span class="token punctuation">{</span>
temp<span class="token punctuation">[</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
j<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
length<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u4E24\u4E2A\u5E8F\u5217\u4E2D\u80AF\u5B9A\u6709\u4E00\u4E2A\u8FD8\u5269\u4E0B\u6570\u636E\uFF0C\u4F46\u662F\u8FD9\u91CC\u6211\u4E0D\u77E5\u9053\u90A3\u4E2A\u8FD8\u5269\u4E0B\u6570\u636E,\u6240\u4EE5\u6211\u5199\u4E24\u4E2A while \u5FAA\u73AF</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span><span class="token punctuation">{</span>
temp<span class="token punctuation">[</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
i<span class="token operator">++</span><span class="token punctuation">;</span>
length<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> last<span class="token punctuation">)</span><span class="token punctuation">{</span>
temp<span class="token punctuation">[</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
j<span class="token operator">++</span><span class="token punctuation">;</span>
length<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u8986\u76D6\u539F\u6765\u4F4D\u7F6E\u7684\u65E0\u5E8F\u5E8F\u5217</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment">//printf(&quot;%d &quot;,temp[i]);</span>
arr<span class="token punctuation">[</span>first <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//printf(&quot;\\n&quot;);</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u5F52\u5E76\u6392\u5E8F</span>
<span class="token keyword">void</span> <span class="token function">MergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> first<span class="token punctuation">,</span> <span class="token keyword">int</span> last<span class="token punctuation">,</span> <span class="token keyword">int</span> temp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> last<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token comment">//\u4ECE\u54EA\u91CC\u62C6\u5206\uFF1F\u6211\u4EEC\u8FD9\u91CC\u4ECE\u4E2D\u95F4\u62C6\u5206</span>
<span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>first <span class="token operator">+</span> last<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token comment">//\u5BF9\u5DE6\u534A\u90E8\u5206\u8FDB\u884C\u62C6\u5206</span>
<span class="token function">MergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> first<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//\u5BF9\u53F3\u534A\u90E8\u5206\u62C6\u5206</span>
<span class="token function">MergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> last<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//\u62C6\u5206\u5B8C\u4E86\uFF0C\u7136\u540E\u5408\u5E76</span>
<span class="token function">Merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> first<span class="token punctuation">,</span> last<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//\u6253\u5370\u5F52\u5E76\u6392\u5E8F\u524D\u7684\u6570\u7EC4</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\u6253\u5370\u5F52\u5E76\u6392\u5E8F\u524D\u7684\u6570\u7EC4:\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">PrintArray</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//\u5BF9\u6570\u7EC4\u8FDB\u884C\u5F52\u5E76\u6392\u5E8F</span>
<span class="token keyword">int</span><span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MergeSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\u6253\u5370\u5F52\u5E76\u6392\u5E8F\u540E\u7684\u6570\u7EC4:\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">PrintArray</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br></div></div><h2 id="_8-8-\u6392\u5E8F\u603B\u7ED3" tabindex="-1"><a class="header-anchor" href="#_8-8-\u6392\u5E8F\u603B\u7ED3" aria-hidden="true">#</a> 8.8 \u6392\u5E8F\u603B\u7ED3</h2><table><thead><tr><th>\u6392\u5E8F\u7B97\u6CD5</th><th>\u5E73\u5747\u65F6\u95F4\u590D\u6742\u5EA6</th><th>\u6700\u574F\u65F6\u95F4\u590D\u6742\u5EA6</th><th>\u5E73\u5747\u7A7A\u95F4\u590D\u6742\u5EA6</th><th>\u7A33\u5B9A\u6027</th></tr></thead><tbody><tr><td>\u9009\u62E9\u6392\u5E8F</td><td>O(n<sup>2</sup>)</td><td>O(n<sup>2</sup>)</td><td>O(1)</td><td>\u4E0D\u7A33\u5B9A</td></tr><tr><td>\u5192\u6CE1\u6392\u5E8F</td><td>O(n<sup>2</sup>)</td><td>O(n<sup>2</sup>)</td><td>O(1)</td><td>\u7A33\u5B9A</td></tr><tr><td>\u76F4\u63A5\u63D2\u5165\u6392\u5E8F</td><td>O(n<sup>2</sup>)</td><td>O(n<sup>2</sup>)</td><td>O(1)</td><td>\u7A33\u5B9A</td></tr><tr><td>\u5E0C\u5C14\u6392\u5E8F</td><td>O(nlogn)</td><td>O(n<sup>2</sup>)</td><td>O(log<sub>2</sub>n)</td><td>\u4E0D\u7A33\u5B9A</td></tr><tr><td>\u5FEB\u901F\u6392\u5E8F</td><td>O(nlogn)</td><td>O(n<sup>2</sup>)</td><td>O(1)</td><td>\u4E0D\u7A33\u5B9A</td></tr><tr><td>\u5F52\u5E76\u6392\u5E8F</td><td>O(nlogn)</td><td>O(nlogn)</td><td>O(n)</td><td>\u7A33\u5B9A</td></tr></tbody></table><h1 id="_9-c-\u6A21\u677F\u7C7B\u4E0E\u6570\u636E\u7ED3\u6784\u57FA\u7840" tabindex="-1"><a class="header-anchor" href="#_9-c-\u6A21\u677F\u7C7B\u4E0E\u6570\u636E\u7ED3\u6784\u57FA\u7840" aria-hidden="true">#</a> 9.C++\u6A21\u677F\u7C7B\u4E0E\u6570\u636E\u7ED3\u6784\u57FA\u7840</h1><p>C++\u6A21\u677F\u662F\u5BB9\u5668\u7684\u6982\u5FF5\u3002</p><p><img src="`+j+`" alt="image-20220329231122831"></p><p>**\u7406\u8BBA\u63D0\u9AD8\uFF1A**\u6240\u6709\u5BB9\u5668\u63D0\u4F9B\u7684\u90FD\u662F\u503C\uFF08value\uFF09\u8BED\u610F\uFF0C\u800C\u975E\u5F15\u7528\uFF08reference\uFF09\u8BED\u610F\u3002<strong>\u5BB9\u5668</strong></p><p><strong>\u6267\u884C\u63D2\u5165\u5143\u7D20\u7684\u64CD\u4F5C\u65F6\uFF0C\u5185\u90E8\u5B9E\u65BD\u62F7\u8D1D\u52A8\u4F5C\u3002<strong>\u6240\u4EE5 STL \u5BB9\u5668\u5185\u5B58\u50A8\u7684\u5143\u7D20\u5FC5\u987B</strong>\u80FD\u591F\u88AB\u62F7\u8D1D</strong>\uFF08\u5FC5\u987B\u63D0\u4F9B\u62F7\u8D1D\u6784\u9020\u51FD\u6570\uFF09\u3002</p><p>\u52A0\u5165\u5230\u5BB9\u5668\u4E2D\u7684\u5143\u7D20\uFF0C\u5E94\u8BE5\u53EF\u4EE5\u88AB\u52A0\u5165\u624D\u884C\u3002</p><h2 id="_9-2\u6A21\u677F\u7C7B\u8BBE\u8BA1\u4E0E\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#_9-2\u6A21\u677F\u7C7B\u8BBE\u8BA1\u4E0E\u5B9E\u73B0" aria-hidden="true">#</a> 9.2\u6A21\u677F\u7C7B\u8BBE\u8BA1\u4E0E\u5B9E\u73B0</h2><h3 id="_9-2-1-\u94FE\u8868\u7C7B-\u94FE\u5F0F\u5B58\u50A8\u8BBE\u8BA1\u4E0E\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#_9-2-1-\u94FE\u8868\u7C7B-\u94FE\u5F0F\u5B58\u50A8\u8BBE\u8BA1\u4E0E\u5B9E\u73B0" aria-hidden="true">#</a> 9.2.1 \u94FE\u8868\u7C7B_\u94FE\u5F0F\u5B58\u50A8\u8BBE\u8BA1\u4E0E\u5B9E\u73B0</h3><ul><li>LinkList.hpp</li></ul><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">LINKLIST_HPP</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LINKLIST_HPP</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span>
<span class="token comment">//c++\u6A21\u677F\u5B8C\u6210\u5355\u5411\u94FE\u8868</span>
<span class="token comment">//\u7ED3\u70B9\u7ED3\u6784</span>
template<span class="token operator">&lt;</span>class T<span class="token operator">&gt;</span>
class ListNode<span class="token punctuation">{</span>
public<span class="token operator">:</span> T data<span class="token punctuation">;</span> <span class="token comment">//\u6570\u636E\u57DF</span>
ListNode<span class="token operator">*</span> next<span class="token punctuation">;</span> <span class="token comment">//\u6307\u9488\u57DF</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//\u5B9A\u4E49\u94FE\u8868\u7C7B</span>
template<span class="token operator">&lt;</span>class T<span class="token operator">&gt;</span>
class LinkList<span class="token punctuation">{</span>
public<span class="token operator">:</span>
<span class="token comment">//\u6784\u9020\u51FD\u6570</span>
<span class="token function">LinkList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">head</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">//\u94FE\u8868\u64CD\u4F5C\u76F8\u5173 API</span>
<span class="token comment">//\u8BBE\u7F6E\u94FE\u8868\u957F\u5EA6</span>
<span class="token keyword">void</span> <span class="token function">setLength</span><span class="token punctuation">(</span><span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
this<span class="token operator">-&gt;</span>length <span class="token operator">=</span> length<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token comment">//\u83B7\u5F97\u94FE\u8868\u957F\u5EA6</span>
<span class="token keyword">int</span> <span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">return</span> this<span class="token operator">-&gt;</span>length<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u8BBE\u7F6E\u94FE\u8868\u5934\u7ED3\u70B9</span>
<span class="token keyword">void</span> <span class="token function">setHead</span><span class="token punctuation">(</span>ListNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>
this<span class="token operator">-&gt;</span>head <span class="token operator">=</span> head<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token comment">//\u83B7\u5F97\u94FE\u8868\u7684\u5934\u7ED3\u70B9</span>
ListNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> <span class="token function">getHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">return</span> this<span class="token operator">-&gt;</span>head<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u63D2\u5165\u5143\u7D20</span>
<span class="token keyword">int</span> <span class="token function">Insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> T value<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment">//\u521B\u5EFA\u7ED3\u70B9</span>
ListNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> newnode <span class="token operator">=</span> new ListNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
newnode<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
newnode<span class="token operator">-&gt;</span>data <span class="token operator">=</span> value<span class="token punctuation">;</span>
<span class="token comment">//\u7B2C\u4E00\u6B21\u63D2\u5165</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>this<span class="token operator">-&gt;</span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
this<span class="token operator">-&gt;</span>head <span class="token operator">=</span> newnode<span class="token punctuation">;</span>
this<span class="token operator">-&gt;</span>length<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u5934\u63D2\u6CD5</span>
ListNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> pCurrent <span class="token operator">=</span> head<span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>pos <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
newnode<span class="token operator">-&gt;</span>next <span class="token operator">=</span> pCurrent<span class="token punctuation">;</span>
this<span class="token operator">-&gt;</span>head <span class="token operator">=</span> newnode<span class="token punctuation">;</span>
this<span class="token operator">-&gt;</span>length<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u627E\u5230\u63D2\u5165\u4F4D\u7F6E</span>
<span class="token comment">//ListNode&lt;T&gt;* pCurrent = head;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pos<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>pCurrent<span class="token operator">-&gt;</span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
pCurrent <span class="token operator">=</span> pCurrent<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u63D2\u5165\u65B0\u7684\u7ED3\u70B9</span>
newnode<span class="token operator">-&gt;</span>next <span class="token operator">=</span> pCurrent<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
pCurrent<span class="token operator">-&gt;</span>next <span class="token operator">=</span> newnode<span class="token punctuation">;</span>
this<span class="token operator">-&gt;</span>length<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u5220\u9664\u67D0\u4E2A\u4F4D\u7F6E\u7684\u7ED3\u70B9</span>
<span class="token keyword">int</span> <span class="token function">Delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>this<span class="token operator">-&gt;</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>pos <span class="token operator">&gt;</span> this<span class="token operator">-&gt;</span>length <span class="token operator">||</span> pos <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u5934\u5220\u6CD5</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
ListNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> pDel <span class="token operator">=</span> this<span class="token operator">-&gt;</span>head<span class="token punctuation">;</span>
this<span class="token operator">-&gt;</span>head <span class="token operator">=</span> pDel<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
this<span class="token operator">-&gt;</span>length<span class="token operator">--</span><span class="token punctuation">;</span>
delete pDel<span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u627E\u5220\u9664\u7684\u4F4D\u7F6E</span>
ListNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> pCurrent <span class="token operator">=</span> head<span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pos<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
pCurrent <span class="token operator">=</span> pCurrent<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
ListNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> pDel <span class="token operator">=</span> pCurrent<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
<span class="token comment">//\u91CD\u65B0\u8FDE\u63A5\u7ED3\u70B9</span>
pCurrent<span class="token operator">-&gt;</span>next <span class="token operator">=</span> pDel<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
<span class="token comment">//\u5220\u9664\u7ED3\u70B9</span>
delete pDel<span class="token punctuation">;</span>
this<span class="token operator">-&gt;</span>length<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u5224\u65AD\u94FE\u8868\u662F\u5426\u4E3A\u7A7A</span>
bool <span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>this<span class="token operator">-&gt;</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">return</span> true<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">return</span> false<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token operator">~</span><span class="token function">LinkList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>this<span class="token operator">-&gt;</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token function">Delete</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token punctuation">}</span>
private<span class="token operator">:</span>
<span class="token keyword">int</span> length<span class="token punctuation">;</span> <span class="token comment">//\u4FDD\u5B58\u7ED3\u70B9\u6570\u91CF</span>
ListNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> head<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br></div></div><ul><li>LinkListTest.cpp</li></ul><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&quot;LinkList.hpp&quot;</span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token comment">//\u6D4B\u8BD5\u5355\u5411\u94FE\u8868\u5BB9\u5668</span>
<span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment">//\u521B\u5EFA\u5BB9\u5668</span>
LinkList<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> list<span class="token punctuation">;</span>
<span class="token comment">//\u5411\u5BB9\u5668\u4E2D\u63D2\u5165\u6570\u636E</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
list<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u904D\u5386\u6253\u5370\u94FE\u8868</span>
ListNode<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">*</span> pCurrent <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">getHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>pCurrent <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
cout <span class="token operator">&lt;&lt;</span> pCurrent<span class="token operator">-&gt;</span>data <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
pCurrent <span class="token operator">=</span> pCurrent<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token comment">//\u5220\u9664\u7ED3\u70B9</span>
list<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//\u904D\u5386\u6253\u5370\u94FE\u8868</span>
pCurrent <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">getHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>pCurrent <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
cout <span class="token operator">&lt;&lt;</span> pCurrent<span class="token operator">-&gt;</span>data <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
pCurrent <span class="token operator">=</span> pCurrent<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//Teacher \u7C7B</span>
class Teacher<span class="token punctuation">{</span>
public<span class="token operator">:</span>
<span class="token function">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token function">Teacher</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>
this<span class="token operator">-&gt;</span>m_name <span class="token operator">=</span> name<span class="token punctuation">;</span>
this<span class="token operator">-&gt;</span>m_age <span class="token operator">=</span> age<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token comment">//\u62F7\u8D1D\u6784\u9020</span>
<span class="token function">Teacher</span><span class="token punctuation">(</span><span class="token keyword">const</span> Teacher<span class="token operator">&amp;</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>
this<span class="token operator">-&gt;</span>m_name <span class="token operator">=</span> t<span class="token punctuation">.</span>m_name<span class="token punctuation">;</span>
this<span class="token operator">-&gt;</span>m_age <span class="token operator">=</span> t<span class="token punctuation">.</span>m_age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u91CD\u8F7D=\u64CD\u4F5C\u7B26</span>
Teacher operator<span class="token operator">=</span><span class="token punctuation">(</span>Teacher<span class="token operator">&amp;</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>
this<span class="token operator">-&gt;</span>m_name <span class="token operator">=</span> t<span class="token punctuation">.</span>m_name<span class="token punctuation">;</span>
this<span class="token operator">-&gt;</span>m_age <span class="token operator">=</span> t<span class="token punctuation">.</span>m_age<span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token operator">*</span>this<span class="token punctuation">;</span> <span class="token punctuation">}</span>
public<span class="token operator">:</span>
string m_name<span class="token punctuation">;</span>
<span class="token keyword">int</span> m_age<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//\u5BB9\u5668\u4E2D\u5B58\u50A8\u5BF9\u8C61 \u91CD\u70B9\uFF1A\u5BB9\u5668\u5143\u7D20\u90FD\u662F\u503C\u5BD3\u610F\uFF0C\u800C\u975E\u5F15\u7528\u5BD3\u610F</span>
<span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment">//\u521B\u5EFA\u4E24\u4E2A Teacher \u7C7B\u7684\u5B9E\u4F8B</span>
Teacher <span class="token function">t1</span><span class="token punctuation">(</span><span class="token string">&quot;aaa&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">t2</span><span class="token punctuation">(</span><span class="token string">&quot;bbb&quot;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//\u521B\u5EFA\u5BB9\u5668</span>
LinkList<span class="token operator">&lt;</span>Teacher<span class="token operator">&gt;</span> list<span class="token punctuation">;</span>
<span class="token comment">//\u5411 list \u4E2D\u63D2\u5165\u5143\u7D20</span>
list<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> t1<span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> t2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//\u6253\u5370\u5BB9\u5668\u4E2D\u7684\u5143\u7D20\u7684\u503C</span>
ListNode<span class="token operator">&lt;</span>Teacher<span class="token operator">&gt;</span><span class="token operator">*</span> pCurrent <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">getHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>pCurrent <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Name:&quot;</span> <span class="token operator">&lt;&lt;</span> pCurrent<span class="token operator">-&gt;</span>data<span class="token punctuation">.</span>m_name <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; Age:&quot;</span> <span class="token operator">&lt;&lt;</span> pCurrent<span class="token operator">-&gt;</span>data<span class="token punctuation">.</span>m_age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
pCurrent <span class="token operator">=</span> pCurrent<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
list<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//\u6253\u5370\u5BB9\u5668\u4E2D\u7684\u5143\u7D20\u7684\u503C</span>
pCurrent <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">getHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>pCurrent <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Name:&quot;</span> <span class="token operator">&lt;&lt;</span> pCurrent<span class="token operator">-&gt;</span>data<span class="token punctuation">.</span>m_name <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; Age:&quot;</span> <span class="token operator">&lt;&lt;</span> pCurrent<span class="token operator">-&gt;</span>data<span class="token punctuation">.</span>m_age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
pCurrent <span class="token operator">=</span> pCurrent<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token comment">//\u5BB9\u5668\u4E2D\u5B58\u50A8\u6307\u9488</span>
<span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment">//\u521B\u5EFA\u4E24\u4E2A Teacher \u7C7B\u7684\u5B9E\u4F8B</span>
Teacher <span class="token function">t1</span><span class="token punctuation">(</span><span class="token string">&quot;aaa&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">t2</span><span class="token punctuation">(</span><span class="token string">&quot;bbb&quot;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//\u521B\u5EFA\u5BB9\u5668</span>
LinkList<span class="token operator">&lt;</span>Teacher<span class="token operator">*</span><span class="token operator">&gt;</span> list<span class="token punctuation">;</span>
<span class="token comment">//\u63D2\u5165\u5143\u7D20</span>
list<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//\u6253\u5370\u5BB9\u5668\u4E2D\u7684\u5143\u7D20\u7684\u503C</span>
ListNode<span class="token operator">&lt;</span>Teacher<span class="token operator">*</span><span class="token operator">&gt;</span><span class="token operator">*</span> pCurrent <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">getHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>pCurrent <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Name:&quot;</span> <span class="token operator">&lt;&lt;</span> pCurrent<span class="token operator">-&gt;</span>data<span class="token operator">-&gt;</span>m_name <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; Age:&quot;</span> <span class="token operator">&lt;&lt;</span> pCurrent<span class="token operator">-&gt;</span>data<span class="token operator">-&gt;</span>m_age <span class="token operator">&lt;&lt;</span>
endl<span class="token punctuation">;</span>
pCurrent <span class="token operator">=</span> pCurrent<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment">//test01();</span>
<span class="token comment">//test02();</span>
<span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br></div></div><h3 id="_9-2-2-\u6808\u7C7B-\u94FE\u5F0F\u5B58\u50A8\u8BBE\u8BA1\u4E0E\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#_9-2-2-\u6808\u7C7B-\u94FE\u5F0F\u5B58\u50A8\u8BBE\u8BA1\u4E0E\u5B9E\u73B0" aria-hidden="true">#</a> 9.2.2 \u6808\u7C7B_\u94FE\u5F0F\u5B58\u50A8\u8BBE\u8BA1\u4E0E\u5B9E\u73B0</h3><ul><li>LinkStack.cpp</li></ul><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">LINKQUEUE_HPP</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LINKQUEUE_HPP</span></span>
<span class="token comment">//\u7ED3\u70B9\u7ED3\u6784</span>
template<span class="token operator">&lt;</span>class T<span class="token operator">&gt;</span>
class LinkNode<span class="token punctuation">{</span>
public<span class="token operator">:</span> T data<span class="token punctuation">;</span>
LinkNode<span class="token operator">*</span> next<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//\u961F\u5217\u7C7B</span>
template<span class="token operator">&lt;</span>class T<span class="token operator">&gt;</span>
class LinkQueue<span class="token punctuation">{</span>
public<span class="token operator">:</span>
<span class="token comment">//\u521D\u59CB\u5316\u94FE\u5F0F\u961F\u5217</span>
<span class="token function">LinkQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
pFront <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
pBack <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
mLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u83B7\u5F97\u961F\u5217\u957F\u5EA6</span>
<span class="token keyword">int</span> <span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">return</span> this<span class="token operator">-&gt;</span>mLength<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u961F\u5217\u52A0\u5165\u5143\u7D20</span>
<span class="token keyword">void</span> <span class="token function">Push</span><span class="token punctuation">(</span>T data<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment">//\u521B\u5EFA\u65B0\u7684\u7ED3\u70B9</span>
LinkNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> newnode <span class="token operator">=</span> new LinkNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
newnode<span class="token operator">-&gt;</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
newnode<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token comment">//\u5224\u65AD\u662F\u4E0D\u662F\u7B2C\u4E00\u6B21\u63D2\u5165</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>pFront <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> pBack <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
pFront <span class="token operator">=</span> newnode<span class="token punctuation">;</span>
pBack <span class="token operator">=</span> newnode<span class="token punctuation">;</span>
this<span class="token operator">-&gt;</span>mLength<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token comment">//\u5176\u4ED6\u60C5\u51B5</span>
this<span class="token operator">-&gt;</span>pBack<span class="token operator">-&gt;</span>next <span class="token operator">=</span> newnode<span class="token punctuation">;</span>
this<span class="token operator">-&gt;</span>pBack <span class="token operator">=</span> newnode<span class="token punctuation">;</span>
this<span class="token operator">-&gt;</span>mLength<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>T<span class="token operator">&amp;</span> <span class="token function">Front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">return</span> this<span class="token operator">-&gt;</span>pFront<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>this<span class="token operator">-&gt;</span>mLength <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token comment">//\u5F53\u961F\u5217\u4E2D\u53EA\u6709\u4E00\u4E2A\u5143\u7D20\u7684\u65F6\u5019</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>this<span class="token operator">-&gt;</span>mLength <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
delete this<span class="token operator">-&gt;</span>pFront<span class="token punctuation">;</span>
this<span class="token operator">-&gt;</span>pFront <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
this<span class="token operator">-&gt;</span>pBack <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
this<span class="token operator">-&gt;</span>mLength<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token comment">//\u5176\u4ED6\u60C5\u51B5</span>
LinkNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> pDel <span class="token operator">=</span> this<span class="token operator">-&gt;</span>pFront<span class="token punctuation">;</span>
this<span class="token operator">-&gt;</span>pFront <span class="token operator">=</span> pDel<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
delete pDel<span class="token punctuation">;</span>
this<span class="token operator">-&gt;</span>mLength<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token operator">~</span><span class="token function">LinkQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>this<span class="token operator">-&gt;</span>mLength <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token punctuation">}</span>
private<span class="token operator">:</span>
LinkNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> pFront<span class="token punctuation">;</span> <span class="token comment">//\u961F\u5934</span>
LinkNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> pBack<span class="token punctuation">;</span> <span class="token comment">//\u961F\u5C3E</span>
<span class="token keyword">int</span> mLength<span class="token punctuation">;</span> <span class="token comment">//\u961F\u5217\u957F\u5EA6</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br></div></div><ul><li>LinkStackTest.cpp</li></ul><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&quot;LinkStack.hpp&quot;</span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token comment">//\u6808\u5BB9\u5668\u5B58\u50A8\u57FA\u7840\u6570\u636E\u7C7B\u578B</span>
<span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment">//\u521B\u5EFA\u6808\u5BB9\u5668</span>
LinkStack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> lstack<span class="token punctuation">;</span>
<span class="token comment">//\u5411\u6808\u4E2D\u52A0\u5165\u5143\u7D20</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
lstack<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u6253\u5370\u6808\u4E2D\u5143\u7D20</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>lstack<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">int</span> val <span class="token operator">=</span> lstack<span class="token punctuation">.</span><span class="token function">Top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cout <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
lstack<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u6808\u5BB9\u5668\u5B58\u50A8\u5BF9\u8C61</span>
<span class="token comment">//Teacher \u7C7B</span>
class Teacher<span class="token punctuation">{</span>
public<span class="token operator">:</span>
<span class="token function">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token function">Teacher</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>
this<span class="token operator">-&gt;</span>m_name <span class="token operator">=</span> name<span class="token punctuation">;</span>
this<span class="token operator">-&gt;</span>m_age <span class="token operator">=</span> age<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token comment">//\u62F7\u8D1D\u6784\u9020</span>
<span class="token function">Teacher</span><span class="token punctuation">(</span><span class="token keyword">const</span> Teacher<span class="token operator">&amp;</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>
this<span class="token operator">-&gt;</span>m_name <span class="token operator">=</span> t<span class="token punctuation">.</span>m_name<span class="token punctuation">;</span>
this<span class="token operator">-&gt;</span>m_age <span class="token operator">=</span> t<span class="token punctuation">.</span>m_age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u91CD\u8F7D=\u64CD\u4F5C\u7B26</span>
Teacher operator<span class="token operator">=</span><span class="token punctuation">(</span>Teacher<span class="token operator">&amp;</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>
this<span class="token operator">-&gt;</span>m_name <span class="token operator">=</span> t<span class="token punctuation">.</span>m_name<span class="token punctuation">;</span>
this<span class="token operator">-&gt;</span>m_age <span class="token operator">=</span> t<span class="token punctuation">.</span>m_age<span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token operator">*</span>this<span class="token punctuation">;</span> <span class="token punctuation">}</span>
public<span class="token operator">:</span>
string m_name<span class="token punctuation">;</span>
<span class="token keyword">int</span> m_age<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment">//\u521B\u5EFA\u6808</span>
LinkStack<span class="token operator">&lt;</span>Teacher<span class="token operator">&gt;</span> lstack<span class="token punctuation">;</span>
<span class="token comment">//\u63D2\u5165\u6570\u636E</span>
Teacher <span class="token function">t1</span><span class="token punctuation">(</span><span class="token string">&quot;aaa&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">t2</span><span class="token punctuation">(</span><span class="token string">&quot;bbb&quot;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">t3</span><span class="token punctuation">(</span><span class="token string">&quot;ccc&quot;</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
lstack<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>
lstack<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span>
lstack<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>t3<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//\u904D\u5386\u6253\u5370</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>lstack<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
Teacher teahcer <span class="token operator">=</span> lstack<span class="token punctuation">.</span><span class="token function">Top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Name:&quot;</span> <span class="token operator">&lt;&lt;</span> teahcer<span class="token punctuation">.</span>m_name <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; Age:&quot;</span> <span class="token operator">&lt;&lt;</span> teahcer<span class="token punctuation">.</span>m_age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">;</span>
lstack<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token comment">//\u5BB9\u5668\u5B58\u50A8\u5BF9\u8C61\u6307\u9488</span>
<span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment">//\u521B\u5EFA\u6808</span>
LinkStack<span class="token operator">&lt;</span>Teacher<span class="token operator">*</span><span class="token operator">&gt;</span> lstack<span class="token punctuation">;</span>
<span class="token comment">//\u63D2\u5165\u6570\u636E</span>
Teacher <span class="token function">t1</span><span class="token punctuation">(</span><span class="token string">&quot;aaa&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">t2</span><span class="token punctuation">(</span><span class="token string">&quot;bbb&quot;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">t3</span><span class="token punctuation">(</span><span class="token string">&quot;ccc&quot;</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
lstack<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>
lstack<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span>
lstack<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t3<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//\u904D\u5386\u6253\u5370</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>lstack<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
Teacher<span class="token operator">*</span> teahcer <span class="token operator">=</span> lstack<span class="token punctuation">.</span><span class="token function">Top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Name:&quot;</span> <span class="token operator">&lt;&lt;</span> teahcer<span class="token operator">-&gt;</span>m_name <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; Age:&quot;</span> <span class="token operator">&lt;&lt;</span> teahcer<span class="token operator">-&gt;</span>m_age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">;</span>
lstack<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment">//test01();</span>
<span class="token comment">//test02();</span>
<span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br></div></div><h3 id="_9-2-3-\u961F\u5217\u7C7B-\u94FE\u5F0F\u5B58\u50A8\u8BBE\u8BA1\u4E0E\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#_9-2-3-\u961F\u5217\u7C7B-\u94FE\u5F0F\u5B58\u50A8\u8BBE\u8BA1\u4E0E\u5B9E\u73B0" aria-hidden="true">#</a> 9.2.3 \u961F\u5217\u7C7B_\u94FE\u5F0F\u5B58\u50A8\u8BBE\u8BA1\u4E0E\u5B9E\u73B0</h3><ul><li>LinkQueue.hpp</li></ul><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">LINKQUEUE_HPP</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LINKQUEUE_HPP</span></span>
<span class="token comment">//\u7ED3\u70B9\u7ED3\u6784</span>
template<span class="token operator">&lt;</span>class T<span class="token operator">&gt;</span>
class LinkNode<span class="token punctuation">{</span>
public<span class="token operator">:</span> T data<span class="token punctuation">;</span>
LinkNode<span class="token operator">*</span> next<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//\u961F\u5217\u7C7B</span>
template<span class="token operator">&lt;</span>class T<span class="token operator">&gt;</span>
class LinkQueue<span class="token punctuation">{</span>
public<span class="token operator">:</span>
<span class="token comment">//\u521D\u59CB\u5316\u94FE\u5F0F\u961F\u5217</span>
<span class="token function">LinkQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
pFront <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
pBack <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
mLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u83B7\u5F97\u961F\u5217\u957F\u5EA6</span>
<span class="token keyword">int</span> <span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">return</span> this<span class="token operator">-&gt;</span>mLength<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u961F\u5217\u52A0\u5165\u5143\u7D20</span>
<span class="token keyword">void</span> <span class="token function">Push</span><span class="token punctuation">(</span>T data<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment">//\u521B\u5EFA\u65B0\u7684\u7ED3\u70B9</span>
LinkNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> newnode <span class="token operator">=</span> new LinkNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
newnode<span class="token operator">-&gt;</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
newnode<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token comment">//\u5224\u65AD\u662F\u4E0D\u662F\u7B2C\u4E00\u6B21\u63D2\u5165</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>pFront <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> pBack <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
pFront <span class="token operator">=</span> newnode<span class="token punctuation">;</span>
pBack <span class="token operator">=</span> newnode<span class="token punctuation">;</span>
this<span class="token operator">-&gt;</span>mLength<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token comment">//\u5176\u4ED6\u60C5\u51B5</span>
this<span class="token operator">-&gt;</span>pBack<span class="token operator">-&gt;</span>next <span class="token operator">=</span> newnode<span class="token punctuation">;</span>
this<span class="token operator">-&gt;</span>pBack <span class="token operator">=</span> newnode<span class="token punctuation">;</span>
this<span class="token operator">-&gt;</span>mLength<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>T<span class="token operator">&amp;</span> <span class="token function">Front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">return</span> this<span class="token operator">-&gt;</span>pFront<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>this<span class="token operator">-&gt;</span>mLength <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token comment">//\u5F53\u961F\u5217\u4E2D\u53EA\u6709\u4E00\u4E2A\u5143\u7D20\u7684\u65F6\u5019</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>this<span class="token operator">-&gt;</span>mLength <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
delete this<span class="token operator">-&gt;</span>pFront<span class="token punctuation">;</span>
this<span class="token operator">-&gt;</span>pFront <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
this<span class="token operator">-&gt;</span>pBack <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
this<span class="token operator">-&gt;</span>mLength<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token comment">//\u5176\u4ED6\u60C5\u51B5</span>
LinkNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> pDel <span class="token operator">=</span> this<span class="token operator">-&gt;</span>pFront<span class="token punctuation">;</span>
this<span class="token operator">-&gt;</span>pFront <span class="token operator">=</span> pDel<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
delete pDel<span class="token punctuation">;</span>
this<span class="token operator">-&gt;</span>mLength<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
private<span class="token operator">:</span>
LinkNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> pFront<span class="token punctuation">;</span> <span class="token comment">//\u961F\u5934</span>
LinkNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> pBack<span class="token punctuation">;</span> <span class="token comment">//\u961F\u5C3E</span>
<span class="token keyword">int</span> mLength<span class="token punctuation">;</span> <span class="token comment">//\u961F\u5217\u957F\u5EA6</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br></div></div><ul><li>LinkQueueTest.cpp</li></ul><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&quot;LinkQueue.hpp&quot;</span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token comment">//\u5B58\u50A8\u57FA\u7840\u6570\u636E\u7C7B\u578B</span>
<span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment">//\u521B\u5EFA\u94FE\u5F0F\u961F\u5217</span>
LinkQueue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> queue<span class="token punctuation">;</span>
<span class="token comment">//\u6DFB\u52A0\u6570\u636E</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
queue<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u4FEE\u6539\u961F\u5934\u5143\u7D20\u7684\u503C</span>
queue<span class="token punctuation">.</span><span class="token function">Front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token comment">//\u6253\u5370\u961F\u5217</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">int</span> val <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">Front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cout <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
queue<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h3 id="_9-2-4-\u94FE\u8868\u7C7B-\u987A\u5E8F\u5B58\u50A8\u8BBE\u8BA1\u4E0E\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#_9-2-4-\u94FE\u8868\u7C7B-\u987A\u5E8F\u5B58\u50A8\u8BBE\u8BA1\u4E0E\u5B9E\u73B0" aria-hidden="true">#</a> 9.2.4 \u94FE\u8868\u7C7B_\u987A\u5E8F\u5B58\u50A8\u8BBE\u8BA1\u4E0E\u5B9E\u73B0</h3><ul><li>SqList.hpp</li></ul><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">SQLIST_HPP</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SQLIST_HPP</span></span>
<span class="token comment">//\u94FE\u8868\u7C7B</span>
template<span class="token operator">&lt;</span>class T<span class="token operator">&gt;</span>
class SqList<span class="token punctuation">{</span>
public<span class="token operator">:</span>
<span class="token comment">//\u6784\u9020\u51FD\u6570\uFF0C\u7531\u7528\u6237\u6307\u5B9A\u5BB9\u91CF</span>
<span class="token function">SqList</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span><span class="token punctuation">{</span>
this<span class="token operator">-&gt;</span>mCapacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>
this<span class="token operator">-&gt;</span>mLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
this<span class="token operator">-&gt;</span>mArray <span class="token operator">=</span> new T<span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u83B7\u5F97\u5BB9\u91CF</span>
<span class="token keyword">int</span> <span class="token function">getCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">return</span> this<span class="token operator">-&gt;</span>mCapacity<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u83B7\u5F97\u94FE\u8868\u957F\u5EA6</span>
<span class="token keyword">int</span> <span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">return</span> this<span class="token operator">-&gt;</span>mLength<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u83B7\u5F97\u6570\u7EC4</span>
T<span class="token operator">*</span> <span class="token function">getArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">return</span> this<span class="token operator">-&gt;</span>mArray<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u83B7\u5F97\u6307\u5B9A\u4F4D\u7F6E\u5143\u7D20</span>
T <span class="token function">Get</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&gt;</span> this<span class="token operator">-&gt;</span>mLength <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">return</span> this<span class="token operator">-&gt;</span>mArray<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u94FE\u8868\u4E2D\u6307\u5B9A\u4F4D\u7F6E\u63D2\u5165\u7ED3\u70B9</span>
<span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> T data<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>this<span class="token operator">-&gt;</span>mLength <span class="token operator">&gt;=</span> this<span class="token operator">-&gt;</span>mCapacity<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&gt;</span> this<span class="token operator">-&gt;</span>mLength<span class="token punctuation">)</span><span class="token punctuation">{</span>
pos <span class="token operator">=</span> this<span class="token operator">-&gt;</span>mLength <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
this<span class="token operator">-&gt;</span>mArray<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">;</span>
this<span class="token operator">-&gt;</span>mLength<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u5220\u9664\u6307\u5B9A\u4F4D\u7F6E\u7ED3\u70B9</span>
<span class="token keyword">void</span> <span class="token function">Delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&gt;</span> this<span class="token operator">-&gt;</span>mLength<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> pos<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mLength<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
this<span class="token operator">-&gt;</span>mArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> this<span class="token operator">-&gt;</span>mArray<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
this<span class="token operator">-&gt;</span>mLength<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token operator">~</span><span class="token function">SqList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>mArray <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
delete mArray<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token punctuation">}</span>
private<span class="token operator">:</span>
<span class="token keyword">int</span> mCapacity<span class="token punctuation">;</span><span class="token comment">//\u5BB9\u91CF</span>
<span class="token keyword">int</span> mLength<span class="token punctuation">;</span><span class="token comment">//\u957F\u5EA6</span>
T<span class="token operator">*</span> mArray<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br></div></div><ul><li>SqListTest.cpp</li></ul><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&quot;SqList.hpp&quot;</span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment">//\u521B\u5EFA\u6808</span>
SqList<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//\u63D2\u5165\u6570\u636E</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
list<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u6253\u5370\u6570\u636E</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
cout <span class="token operator">&lt;&lt;</span> list<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="_9-2-5-\u6808\u7C7B-\u987A\u5E8F\u5B58\u50A8\u8BBE\u8BA1\u4E0E\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#_9-2-5-\u6808\u7C7B-\u987A\u5E8F\u5B58\u50A8\u8BBE\u8BA1\u4E0E\u5B9E\u73B0" aria-hidden="true">#</a> 9.2.5 \u6808\u7C7B_\u987A\u5E8F\u5B58\u50A8\u8BBE\u8BA1\u4E0E\u5B9E\u73B0</h3><ul><li>SqStack.hpp</li></ul><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">SQSTACK_HPP</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SQSTACK_HPP</span></span>
<span class="token comment">//\u6808\u7684\u987A\u5E8F\u5B58\u50A8</span>
template<span class="token operator">&lt;</span>class T<span class="token operator">&gt;</span>
class SqStack<span class="token punctuation">{</span>
public<span class="token operator">:</span>
<span class="token comment">//\u6784\u9020\u51FD\u6570</span>
<span class="token function">SqStack</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span><span class="token punctuation">{</span>
this<span class="token operator">-&gt;</span>mCapacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>
this<span class="token operator">-&gt;</span>mLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
this<span class="token operator">-&gt;</span>mArray <span class="token operator">=</span> new T<span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">return</span> this<span class="token operator">-&gt;</span>mLength<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u538B\u6808</span>
<span class="token keyword">void</span> <span class="token function">Push</span><span class="token punctuation">(</span>T data<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>this<span class="token operator">-&gt;</span>mLength <span class="token operator">&gt;=</span> this<span class="token operator">-&gt;</span>mCapacity<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
this<span class="token operator">-&gt;</span>mArray<span class="token punctuation">[</span>this<span class="token operator">-&gt;</span>mLength<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">;</span>
this<span class="token operator">-&gt;</span>mLength<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u51FA\u6808</span>
T <span class="token function">Top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">return</span> this<span class="token operator">-&gt;</span>mArray<span class="token punctuation">[</span>this<span class="token operator">-&gt;</span>mLength <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u5F39\u51FA\u6808\u9876\u5143\u7D20</span>
<span class="token keyword">void</span> <span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
this<span class="token operator">-&gt;</span>mLength<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token operator">~</span><span class="token function">SqStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>this<span class="token operator">-&gt;</span>mArray <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
delete this<span class="token operator">-&gt;</span>mArray<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token punctuation">}</span>
private<span class="token operator">:</span> T<span class="token operator">*</span> mArray<span class="token punctuation">;</span>
<span class="token keyword">int</span> mCapacity<span class="token punctuation">;</span> <span class="token comment">//\u5BB9\u91CF</span>
<span class="token keyword">int</span> mLength<span class="token punctuation">;</span> <span class="token comment">//\u957F\u5EA6</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><ul><li>SqStackTest.cpp</li></ul><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&quot;SqStack.hpp&quot;</span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment">//\u521B\u5EFA\u6808</span>
SqStack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">stack</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//\u538B\u6808</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
stack<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u904D\u5386</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
cout <span class="token operator">&lt;&lt;</span> stack<span class="token punctuation">.</span><span class="token function">Top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
stack<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="_9-2-6-\u961F\u5217\u7C7B-\u987A\u5E8F\u5B58\u50A8\u8BBE\u8BA1\u4E0E\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#_9-2-6-\u961F\u5217\u7C7B-\u987A\u5E8F\u5B58\u50A8\u8BBE\u8BA1\u4E0E\u5B9E\u73B0" aria-hidden="true">#</a> 9.2.6 \u961F\u5217\u7C7B_\u987A\u5E8F\u5B58\u50A8\u8BBE\u8BA1\u4E0E\u5B9E\u73B0</h3><ul><li>SqQueue.hpp</li></ul><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">SQQUEUE_HPP</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SQQUEUE_HPP</span></span>
<span class="token comment">//\u961F\u5217\u7684\u987A\u5E8F\u5B58\u50A8</span>
template<span class="token operator">&lt;</span>class T<span class="token operator">&gt;</span>
class SqQueue<span class="token punctuation">{</span>
public<span class="token operator">:</span>
<span class="token function">SqQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span><span class="token punctuation">{</span>
this<span class="token operator">-&gt;</span>mCapacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>
this<span class="token operator">-&gt;</span>mLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
this<span class="token operator">-&gt;</span>mArray <span class="token operator">=</span> new T<span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u83B7\u5F97\u961F\u5217\u957F\u5EA6</span>
<span class="token keyword">int</span> <span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">return</span> this<span class="token operator">-&gt;</span>mLength<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u83B7\u5F97\u5BB9\u91CF</span>
<span class="token keyword">int</span> <span class="token function">getCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">return</span> this<span class="token operator">-&gt;</span>mCapacity<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u5165\u961F\u64CD\u4F5C</span>
<span class="token keyword">void</span> <span class="token function">Push</span><span class="token punctuation">(</span>T data<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>this<span class="token operator">-&gt;</span>mLength <span class="token operator">&gt;=</span> this<span class="token operator">-&gt;</span>mCapacity<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
this<span class="token operator">-&gt;</span>mArray<span class="token punctuation">[</span>mLength<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">;</span>
this<span class="token operator">-&gt;</span>mLength<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u51FA\u961F\u64CD\u4F5C</span>
T <span class="token function">Front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">return</span> this<span class="token operator">-&gt;</span>mArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u961F\u5934\u5F39\u51FA\u5143\u7D20</span>
<span class="token keyword">void</span> <span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mLength<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
mArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> mArray<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
this<span class="token operator">-&gt;</span>mLength<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
private<span class="token operator">:</span>
<span class="token keyword">int</span> mLength<span class="token punctuation">;</span>
T<span class="token operator">*</span> mArray<span class="token punctuation">;</span>
<span class="token keyword">int</span> mCapacity<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><ul><li>SqQueueTest.cpp</li></ul><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&quot;SqQueue.hpp&quot;</span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment">//\u521B\u5EFA\u961F\u5217</span>
SqQueue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">queue</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//\u5411\u961F\u5217\u4E2D\u63D2\u5165\u5143\u7D20</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
queue<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u6253\u5370\u961F\u5217\u5143\u7D20</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
cout <span class="token operator">&lt;&lt;</span> queue<span class="token punctuation">.</span><span class="token function">Front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
queue<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div>`,286);function A(B,J){return R}var D=s(x,[["render",A]]);export{D as default};
